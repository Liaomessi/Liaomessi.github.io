{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/article/tag.png","path":"img/article/tag.png","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"source/img/header_img/about.jpg","path":"img/header_img/about.jpg","modified":0,"renderable":0},{"_id":"source/img/pay_url/ali_payment.jpg","path":"img/pay_url/ali_payment.jpg","modified":0,"renderable":0},{"_id":"source/img/pay_url/wechat_payment.jpg","path":"img/pay_url/wechat_payment.jpg","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/header_img/archives-widget.jpg","path":"img/header_img/archives-widget.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/huweihuang/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"source/img/header_img/archive.jpg","path":"img/header_img/archive.jpg","modified":0,"renderable":0},{"_id":"themes/huweihuang/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/avatar/ironman.png","path":"img/avatar/ironman.png","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"source/img/article_header/article_bg.jpg","path":"img/article_header/article_bg.jpg","modified":0,"renderable":0},{"_id":"source/img/article/huweihuang_blog.png","path":"img/article/huweihuang_blog.png","modified":0,"renderable":0},{"_id":"source/img/blog.jpg","path":"img/blog.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/home.jpg","path":"img/header_img/home.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/tag.png","path":"img/header_img/tag.png","modified":0,"renderable":0},{"_id":"source/img/article_header/article_header.png","path":"img/article_header/article_header.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home2.png","path":"img/header_img/home2.png","modified":0,"renderable":0},{"_id":"source/img/header_img/404.png","path":"img/header_img/404.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"8b9e17605b69cf3d2b0cbf8ddc5c7357d538ccd9","modified":1610374948824},{"_id":"source/CNAME","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1610548559636},{"_id":"themes/huweihuang/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1610374948950},{"_id":"themes/huweihuang/_config.yml","hash":"93c0edabaf1d97a8f429dbd9ff9d97286edb3b56","modified":1610374948950},{"_id":"source/_posts/git-advanced-guide.md","hash":"d6e2e33305c7c095c2924d2c5abb9b1c134cb1c5","modified":1617882728137},{"_id":"source/_posts/nginx1.md","hash":"6e8d13a61d5e2976cc138150e3d0b02901dbd25a","modified":1615092038714},{"_id":"source/_posts/git-proxy.md","hash":"55e7d359a56b6fe65ce32afd9d850af9010e9c2a","modified":1617807659393},{"_id":"source/_posts/state-pattern.md","hash":"0d92eb20bdaba052df56e2c848b71b283a17ecae","modified":1615091625801},{"_id":"source/_posts/wechat-open-api.md","hash":"4473c621287a0cd09c4f7419868f844802769268","modified":1615092038717},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1610374948943},{"_id":"source/tags/index.md","hash":"fc1c291c9325c2cbf4960233834c5d3f74f5217f","modified":1610374948949},{"_id":"source/archive/index.md","hash":"64654229f1d507e271568df72af73afb3788be20","modified":1610460865300},{"_id":"source/about/index.md","hash":"fded0c808e24f7200e953850b22146d7abc265bb","modified":1611577940105},{"_id":"themes/huweihuang/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1610374948951},{"_id":"themes/huweihuang/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1610374948952},{"_id":"themes/huweihuang/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1610374948951},{"_id":"themes/huweihuang/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1610374948951},{"_id":"themes/huweihuang/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1610374948951},{"_id":"themes/huweihuang/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1610374948952},{"_id":"themes/huweihuang/languages_to_be_added/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1610374948952},{"_id":"themes/huweihuang/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1610374948952},{"_id":"themes/huweihuang/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1610374948952},{"_id":"themes/huweihuang/layout/404.ejs","hash":"2e8d719fab50014b7963d3c2f4ee34c23e749d7b","modified":1610374948953},{"_id":"themes/huweihuang/layout/about.ejs","hash":"96c08fc3580b842ad9d8f37f2cdf02e6fa57d7bc","modified":1610374948958},{"_id":"themes/huweihuang/layout/archive.ejs","hash":"197a1ee1b499bf87c9e77a484ca1f6cc58313e1d","modified":1610374948959},{"_id":"themes/huweihuang/layout/index.ejs","hash":"1bb0e537503c24499eee4ea17fe3e4f46bac1309","modified":1610374948959},{"_id":"themes/huweihuang/layout/layout.ejs","hash":"389fc11a45676f94b77ebd2cb0d658a0358979c8","modified":1610374948960},{"_id":"themes/huweihuang/layout/keynote.ejs","hash":"e177b9e4a159f40b512f4ae1bfd928be4ab60840","modified":1610374948960},{"_id":"themes/huweihuang/layout/post.ejs","hash":"9ecd81b7c2783f35cca80e8c66d96f0619f57241","modified":1614347523129},{"_id":"themes/huweihuang/layout/page.ejs","hash":"f77a9eb0e09931eac85e8244027eb5678c7b0705","modified":1610374948960},{"_id":"themes/huweihuang/layout/tags.ejs","hash":"63911a99e6daf9968bfdd7d69f0d3d697039902e","modified":1610374948961},{"_id":"source/_posts/git-advanced-guide/commit_log.png","hash":"32eede980e7f342618486e49e3eace1841fa51c1","modified":1614254611446},{"_id":"source/_posts/git-advanced-guide/init.jpg","hash":"adbb90f10d0a99f9d832e383be52ad56c7cdf9e6","modified":1612189969649},{"_id":"source/_posts/git-proxy/proxy_config.jpg","hash":"05b55d7fc780464a29188a326bbe39d0626fe28b","modified":1617806241074},{"_id":"source/_posts/nginx1/image-20201106211115329.png","hash":"0023f2188a8146b278afaaf77b3e557f95250b21","modified":1610543329834},{"_id":"source/_posts/nginx1/image-20201106212102055.png","hash":"54bccae9dc8f6c5841830607b929a30dfa6739c6","modified":1610543329850},{"_id":"source/_posts/nginx1/image-20201106212028665.png","hash":"c9fae3622661f55c178e3f71169878d1edf2a18a","modified":1610543329850},{"_id":"source/_posts/nginx1/image-20201106212349144.png","hash":"1229487be17ccca3d208dcab73f8d7450b2bb113","modified":1610543329850},{"_id":"source/_posts/nginx1/image-20201107124307791.png","hash":"45d3b77b559bbb472afcda55a0f73cc54fd5de4b","modified":1610543329850},{"_id":"source/_posts/state-pattern/电影状态转移图.png","hash":"ff9630e75dc8edba2a2131b14f6b4005b39c2932","modified":1615036076451},{"_id":"source/_posts/wechat-open-api/idea_log.jpg","hash":"b9f91685894eb22c6739ca6daea02f2c960f9b7c","modified":1611152551862},{"_id":"source/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1610374948841},{"_id":"themes/huweihuang/source/css/archive.styl","hash":"bcb216ef65804c97b1a5dbe5f519fc171a13aaf1","modified":1610374948962},{"_id":"themes/huweihuang/source/css/beantech.css","hash":"5e9bee0a553da83a3efd4e9bc975a0ebd13b1b7d","modified":1610374948962},{"_id":"themes/huweihuang/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1610374948963},{"_id":"themes/huweihuang/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1610374948966},{"_id":"themes/huweihuang/source/css/donate.css","hash":"948c148076e7e0e0f78225f753813012938f5022","modified":1610374948966},{"_id":"themes/huweihuang/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1610374948966},{"_id":"themes/huweihuang/source/css/rocket.styl","hash":"0abbccdbcd6cce70e8a0bab7152c38adc0b708f1","modified":1610374948967},{"_id":"themes/huweihuang/source/css/toc.styl","hash":"e197d57dc5312b20974193b6991c779e266fadca","modified":1610374948968},{"_id":"themes/huweihuang/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1610374948967},{"_id":"themes/huweihuang/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1610374948968},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1610374948969},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1610374948971},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1610374948972},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1610374948972},{"_id":"themes/huweihuang/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1610374948974},{"_id":"themes/huweihuang/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1610374948974},{"_id":"themes/huweihuang/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1610374948975},{"_id":"themes/huweihuang/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1610374948980},{"_id":"themes/huweihuang/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1610374948980},{"_id":"themes/huweihuang/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1610374948981},{"_id":"themes/huweihuang/source/js/toc.js","hash":"4ffe95b7755b035ee1b41664fa72b0ebea29c3f8","modified":1610374948980},{"_id":"themes/huweihuang/layout/_widget/archive.ejs","hash":"ad9fb0073d40fe90bfe3a1e3246e0b07e12b3ecf","modified":1610374948956},{"_id":"themes/huweihuang/layout/_widget/category.ejs","hash":"c32e6fb8f3a07c5cbaffcebf93c357237c18b009","modified":1610374948956},{"_id":"themes/huweihuang/layout/_widget/featured-tags.ejs","hash":"e29431fa78c81d7c521bb1f7be356651fcde959c","modified":1610374948957},{"_id":"themes/huweihuang/layout/_widget/friends-blog.ejs","hash":"b185fcffb0d181ddd9eb2259af38cf7d82fb2846","modified":1610374948957},{"_id":"themes/huweihuang/layout/_widget/recent-posts.ejs","hash":"814dd716083a8a75eb31f9d2d6ab28150b01c533","modified":1610374948957},{"_id":"themes/huweihuang/layout/_widget/short-about.ejs","hash":"66e9c11fb694143748a74a7e40329c60744924ec","modified":1610374948958},{"_id":"themes/huweihuang/layout/_partial/footer.ejs","hash":"9339b1937c82f70c56bc4402c5b2afce976da53a","modified":1610800995697},{"_id":"themes/huweihuang/layout/_partial/head.ejs","hash":"07e23da21331914b971bb0317f545ea677484180","modified":1610374948954},{"_id":"themes/huweihuang/layout/_partial/header.ejs","hash":"10d5e0966895f86373b0652e9ad2df69d742bfe4","modified":1610374948954},{"_id":"themes/huweihuang/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1610374948954},{"_id":"themes/huweihuang/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1610374948955},{"_id":"themes/huweihuang/layout/_partial/sidebar.ejs","hash":"bc7834dd769eeac94a76ffd9cfbb13a622861b62","modified":1610374948955},{"_id":"themes/huweihuang/layout/_partial/toc.ejs","hash":"aa41fc56f2fa03559aa266fc062772e9e3bbebbf","modified":1610374948956},{"_id":"source/_posts/wechat-open-api/wechat_open.jpg","hash":"486743318671dd1f46adfc296c181336e8be3217","modified":1611151120556},{"_id":"source/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1610374948899},{"_id":"source/img/pay_url/ali_payment.jpg","hash":"73c8f220f42d607e8881d23ae3bc9af97c78554c","modified":1610547810808},{"_id":"source/img/pay_url/wechat_payment.jpg","hash":"10bbf049b7ea8023be7389d1d879e0127f97f119","modified":1610547596663},{"_id":"themes/huweihuang/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1610374948965},{"_id":"themes/huweihuang/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1610374948970},{"_id":"themes/huweihuang/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1610374948973},{"_id":"themes/huweihuang/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1610374948979},{"_id":"source/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1610374948904},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1610374948949},{"_id":"themes/huweihuang/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1610374948964},{"_id":"themes/huweihuang/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1610374948967},{"_id":"themes/huweihuang/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1610374948967},{"_id":"source/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1610374948901},{"_id":"themes/huweihuang/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1610374948977},{"_id":"source/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1610374948855},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1610374948946},{"_id":"source/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1610374948843},{"_id":"source/_posts/wechat-open-api/local_demo.jpg","hash":"9854c18aada4a15fe1467209177c1bf0b04920c5","modified":1611152173474},{"_id":"source/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1610374948841},{"_id":"source/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1610374948861},{"_id":"source/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1610374948921},{"_id":"source/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1610374948942},{"_id":"source/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1610374948852},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1610374948915},{"_id":"source/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1610374948933},{"_id":"source/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1610374948874},{"_id":"public/post-sitemap.xml","hash":"a035f11ef49f1491eaa2409e2e7341c0678a7848","modified":1617882734481},{"_id":"public/page-sitemap.xml","hash":"a4cd750db7d30c4bf5f4b4dbb891f808e64b179c","modified":1617807737954},{"_id":"public/tag-sitemap.xml","hash":"57fc698ae981468d09ca9d37939a9f46b329fcb4","modified":1617882734593},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1617807737993},{"_id":"public/sitemap.xml","hash":"a2200dc7266764552d653dfd147a1018cd6a7a46","modified":1617882734630},{"_id":"public/404.html","hash":"0827672ad601e5b9d6753894213de5df91cdb000","modified":1617807737999},{"_id":"public/tags/index.html","hash":"d26ad8ccfbdef710884d8b4b5724459e15b0e823","modified":1617882734637},{"_id":"public/article/git-proxy/index.html","hash":"b3060097c6569ee42666e2ace063faf1e5779814","modified":1617807737999},{"_id":"public/article/state-pattern/index.html","hash":"1cda52e2eb0ac041285eb191efb52483476626b0","modified":1617807737999},{"_id":"public/article/git-advanced-guide/index.html","hash":"ea8446d137dddb7e07f1fe9422ac84424258d9a6","modified":1617882734638},{"_id":"public/article/wechat-open-api/index.html","hash":"751ba25533b50d3feaa6a3e1a5f42fbc612c7eb1","modified":1617807738000},{"_id":"public/article/nginx1/index.html","hash":"e9cfe66b93ee824cd3392abaa3ced9592d0fa7b6","modified":1617807738000},{"_id":"public/about/index.html","hash":"69c817d759d7fbf562e4a7759ecd295b46ba1665","modified":1617807738000},{"_id":"public/archive/index.html","hash":"77d73a86b0eb7db5ee332f85b67fe130330878bf","modified":1617807738000},{"_id":"public/archives/index.html","hash":"7143c3f99c704fac7b2f6f0497720d955a7952c2","modified":1617807738000},{"_id":"public/archives/2021/index.html","hash":"19e14e512ceebcfab908a20436b85bdf6dd6a1ae","modified":1617807738000},{"_id":"public/archives/2021/01/index.html","hash":"f9429fae27422473cde2a71ad8685ce6148719bb","modified":1617807738000},{"_id":"public/archives/2021/03/index.html","hash":"226f546c4e7a61695251baedb4b998723ba3941f","modified":1617807738000},{"_id":"public/archives/2021/02/index.html","hash":"f03e624dd4aaf39ced2d8fceafcac37116c31938","modified":1617807738000},{"_id":"public/archives/2021/04/index.html","hash":"ff52ef03c195c364297db52d35f161fe920ed4b6","modified":1617807738000},{"_id":"public/index.html","hash":"947c16df49f98131888bfac33b55221eb38a68f8","modified":1617807738001},{"_id":"public/tags/git/index.html","hash":"fcdd63e6ea2efcf4d206493f7894f5e927921ea7","modified":1617807738001},{"_id":"public/tags/git进阶/index.html","hash":"62b8d75ba910cf9388bdc4c25e2aac1c3a0e349f","modified":1617807738001},{"_id":"public/tags/git-cherry-pick/index.html","hash":"5c3d5f093d046c900f63196c2ad18314d1654c17","modified":1617807738001},{"_id":"public/tags/nginx/index.html","hash":"62494a33ff816984bced9bf363524685ba71d410","modified":1617807738001},{"_id":"public/tags/微信登录/index.html","hash":"f046d6d8293f46789412b5d8b6bb4bc4b257132d","modified":1617807738001},{"_id":"public/tags/本地调试/index.html","hash":"4b84254677457f3c16a859c4edaaa33a3b18c299","modified":1617807738001},{"_id":"public/tags/windows/index.html","hash":"6fd5700a8c11b262777af77f9268916b478db200","modified":1617807738001},{"_id":"public/tags/设计模式/index.html","hash":"2eacf34a1e6667167c24baecf35f55e440f47132","modified":1617807738001},{"_id":"public/tags/状态模式/index.html","hash":"5b2bffb0372a504049a5f1dcdfb8b85d06b14347","modified":1617807738001},{"_id":"public/tags/生产实践/index.html","hash":"436fe3286650d3a3edf9855f639f79f375ef1e0f","modified":1617807738002},{"_id":"public/CNAME","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1617807738025},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1617807738025},{"_id":"public/img/article/tag.png","hash":"c8632d64d9471009098b84f70273e63037a4e7b8","modified":1617807738025},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1617807738025},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1617807738025},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1617807738025},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1617807738026},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1617807738026},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1617807738026},{"_id":"public/article/git-proxy/proxy_config.jpg","hash":"05b55d7fc780464a29188a326bbe39d0626fe28b","modified":1617807738026},{"_id":"public/article/state-pattern/电影状态转移图.png","hash":"ff9630e75dc8edba2a2131b14f6b4005b39c2932","modified":1617807738026},{"_id":"public/article/git-advanced-guide/commit_log.png","hash":"32eede980e7f342618486e49e3eace1841fa51c1","modified":1617807738026},{"_id":"public/article/wechat-open-api/idea_log.jpg","hash":"b9f91685894eb22c6739ca6daea02f2c960f9b7c","modified":1617807738026},{"_id":"public/article/git-advanced-guide/init.jpg","hash":"adbb90f10d0a99f9d832e383be52ad56c7cdf9e6","modified":1617807738026},{"_id":"public/article/nginx1/image-20201106211115329.png","hash":"0023f2188a8146b278afaaf77b3e557f95250b21","modified":1617807738026},{"_id":"public/article/nginx1/image-20201106212028665.png","hash":"c9fae3622661f55c178e3f71169878d1edf2a18a","modified":1617807738027},{"_id":"public/article/nginx1/image-20201106212102055.png","hash":"54bccae9dc8f6c5841830607b929a30dfa6739c6","modified":1617807738027},{"_id":"public/article/nginx1/image-20201106212349144.png","hash":"1229487be17ccca3d208dcab73f8d7450b2bb113","modified":1617807738027},{"_id":"public/article/nginx1/image-20201107124307791.png","hash":"45d3b77b559bbb472afcda55a0f73cc54fd5de4b","modified":1617807738027},{"_id":"public/img/header_img/about.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1617807738394},{"_id":"public/img/pay_url/ali_payment.jpg","hash":"73c8f220f42d607e8881d23ae3bc9af97c78554c","modified":1617807738396},{"_id":"public/img/pay_url/wechat_payment.jpg","hash":"10bbf049b7ea8023be7389d1d879e0127f97f119","modified":1617807738399},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1617807738399},{"_id":"public/article/wechat-open-api/wechat_open.jpg","hash":"486743318671dd1f46adfc296c181336e8be3217","modified":1617807738399},{"_id":"public/css/archive.css","hash":"8db895ebaeff19ac145c961abcfd5d4a8d67a8ea","modified":1617807738423},{"_id":"public/css/donate.css","hash":"f65ac8363d8d215adb896158e7b45165db259a47","modified":1617807738423},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1617807738423},{"_id":"public/css/highlight.css","hash":"c58b4569c086e477a00dcbf5a95a166fe5fecfb0","modified":1617807738424},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1617807738424},{"_id":"public/css/toc.css","hash":"f756b9e1b2208d2e5b0f3d2ac5e4fea3b7da0e10","modified":1617807738424},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1617807738424},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1617807738424},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1617807738425},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1617807738425},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1617807738425},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1617807738425},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1617807738425},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1617807738425},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1617807738425},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1617807738425},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1617807738425},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1617807738425},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1617807738426},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1617807738426},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1617807738426},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1617807738426},{"_id":"public/img/header_img/archive.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1617807738427},{"_id":"public/img/header_img/archives-widget.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1617807738431},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1617807738431},{"_id":"public/img/avatar/ironman.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1617807738451},{"_id":"public/img/article_header/article_bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1617807738452},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1617807738454},{"_id":"public/article/wechat-open-api/local_demo.jpg","hash":"9854c18aada4a15fe1467209177c1bf0b04920c5","modified":1617807738455},{"_id":"public/img/article/huweihuang_blog.png","hash":"392cf8b33be6c752dd908e027fa3346a6ecd58ab","modified":1617807738484},{"_id":"public/img/header_img/home.jpg","hash":"8f1c440427a4aa86b623503a926c027e2e10cd66","modified":1617807738488},{"_id":"public/img/blog.jpg","hash":"a76af0b98dbe92ca2d21babcef13f094e409554b","modified":1617807738490},{"_id":"public/img/header_img/tag.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1617807738509},{"_id":"public/img/article_header/article_header.png","hash":"d9fa12f1e40924a0db57761d09d52dce450b4f7b","modified":1617807738513},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1617807738518},{"_id":"public/img/header_img/home2.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1617807738520},{"_id":"public/img/header_img/404.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1617807738527}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原","header-img":"/img/header_img/404.png","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原\"\nheader-img: \"/img/header_img/404.png\"\n---\n","date":"2021-01-11T14:22:28.824Z","updated":"2021-01-11T14:22:28.824Z","path":"404.html","title":"","comments":1,"_id":"ckn7kyf6y0000vgvsml3fc4ob","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"/img/header_img/tag.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"/img/header_img/tag.png\"\n---\n","date":"2021-01-11T14:22:28.949Z","updated":"2021-01-11T14:22:28.949Z","path":"tags/index.html","comments":1,"_id":"ckn7kyf810002vgvsupo95mhf","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2017-10-03T02:48:33.000Z","description":"求知无坦途","header-img":"/img/header_img/about.jpg","aplayer":true,"fixed":false,"_content":"\n### 一句话\n\n>There is no royal road to learning \n\n### 关于我\n\n>一个莫名其妙的，喜欢敲代码，喜欢研究技术的 'Single Dog'\n\n### 兴趣方向\n\n> 前后端（Java, React等）和一些有趣的小东西。\n\n### 参与社区\n\n > CSDN博客: https://blog.csdn.net/You_are_my_Mr_Right\n >\n > Github: https://github.com/liaomessi\n >\n > 个人网站：www.tultuq.com\n\n### 联系我\n\n>Email: MRqbyang@163.com\n\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2017-10-03 10:48:33\ndescription: \"求知无坦途\"\nheader-img: \"/img/header_img/about.jpg\"\naplayer: true\nfixed: false\n---\n\n### 一句话\n\n>There is no royal road to learning \n\n### 关于我\n\n>一个莫名其妙的，喜欢敲代码，喜欢研究技术的 'Single Dog'\n\n### 兴趣方向\n\n> 前后端（Java, React等）和一些有趣的小东西。\n\n### 参与社区\n\n > CSDN博客: https://blog.csdn.net/You_are_my_Mr_Right\n >\n > Github: https://github.com/liaomessi\n >\n > 个人网站：www.tultuq.com\n\n### 联系我\n\n>Email: MRqbyang@163.com\n\n","updated":"2021-01-25T12:32:20.105Z","path":"about/index.html","comments":1,"_id":"ckn7kyf850004vgvsdz06jk7r","content":"<h3><span id=\"一句话\">一句话</span></h3>\n<blockquote>\n<p>There is no royal road to learning</p>\n</blockquote>\n<h3><span id=\"关于我\">关于我</span></h3>\n<blockquote>\n<p>一个莫名其妙的，喜欢敲代码，喜欢研究技术的 ‘Single Dog’</p>\n</blockquote>\n<h3><span id=\"兴趣方向\">兴趣方向</span></h3>\n<blockquote>\n<p>前后端（Java, React等）和一些有趣的小东西。</p>\n</blockquote>\n<h3><span id=\"参与社区\">参与社区</span></h3>\n<blockquote>\n<p>CSDN博客: <a href=\"https://blog.csdn.net/You_are_my_Mr_Right\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/You_are_my_Mr_Right</a></p>\n<p>Github: <a href=\"https://github.com/liaomessi\" target=\"_blank\" rel=\"noopener\">https://github.com/liaomessi</a></p>\n<p>个人网站：<a href=\"http://www.tultuq.com\" target=\"_blank\" rel=\"noopener\">www.tultuq.com</a></p>\n</blockquote>\n<h3><span id=\"联系我\">联系我</span></h3>\n<blockquote>\n<p>Email: <a href=\"mailto:MRqbyang@163.com\" target=\"_blank\" rel=\"noopener\">MRqbyang@163.com</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3>一句话</h3>\n<blockquote>\n<p>There is no royal road to learning</p>\n</blockquote>\n<h3>关于我</h3>\n<blockquote>\n<p>一个莫名其妙的，喜欢敲代码，喜欢研究技术的 ‘Single Dog’</p>\n</blockquote>\n<h3>兴趣方向</h3>\n<blockquote>\n<p>前后端（Java, React等）和一些有趣的小东西。</p>\n</blockquote>\n<h3>参与社区</h3>\n<blockquote>\n<p>CSDN博客: <a href=\"https://blog.csdn.net/You_are_my_Mr_Right\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/You_are_my_Mr_Right</a></p>\n<p>Github: <a href=\"https://github.com/liaomessi\" target=\"_blank\" rel=\"noopener\">https://github.com/liaomessi</a></p>\n<p>个人网站：<a href=\"http://www.tultuq.com\" target=\"_blank\" rel=\"noopener\">www.tultuq.com</a></p>\n</blockquote>\n<h3>联系我</h3>\n<blockquote>\n<p>Email: <a href=\"mailto:MRqbyang@163.com\" target=\"_blank\" rel=\"noopener\">MRqbyang@163.com</a></p>\n</blockquote>\n"},{"layout":"archive","title":"Archives","header-img":"/img/header_img/archive.jpg","comments":0,"date":"2021-01-11T16:00:00.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"/img/header_img/archive.jpg\"\ncomments: false\ndate: 2021-01-12\ndescription: \"Hey, this is archives\"\n---\n","updated":"2021-01-12T14:14:25.300Z","path":"archive/index.html","_id":"ckn7kyf8c0007vgvs2edp68py","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"git的进阶指南(git cherry-pick)","catalog":true,"date":"2021-02-01T13:20:50.000Z","subtitle":null,"header-img":null,"_content":"# git cherry-pick\n\n## 关于 git cherry-pick 的含义和适用场景\n### cherry-pick的简介\n cherry-pick (捡樱桃)，顾名思义:是在一堆樱桃（commit）中挑选出自己想要的樱桃（commit）。\n### cherry-pick的功能\n cherry-pick 的功能：在某一个分支中的commit中选出一个或多个commit提交到另一个分支。\n### cherry-pick的使用场景\n cherry-pick 的使用场景： 比如我们从master分支切出来一个feature分支用于开发新的功能，而在开发这个新功能的时候顺便改了几个bug，相信这种顺便改bug的情景应该很常见吧，哈哈哈。这就有个问题了，我们现在并没有打算把这个feature给合进master分支，但是我们希望把我们顺手改的几个bug给合进master里面，这时候我们就可以使用cherry-pick将指定的commit给提交到master分支中去。\n### cherry-pick的副作用(个人理解)\n 使用cherry-pick 会在两个分支提交相同的内容，但是生成不同的commitId，这样在后续进行merge分支的时候，对于cherry-pick提交的commit内容依然会在PR中展示出来，给人带来疑惑（两个分支都有这段代码，但是PR中还是会存在这段代码，这就是commitId不同导致的）。\n所以**cherry-pick 只适用于commit已经混乱了，无法生成一个纯净的PR时使用，它不应该被大范围的使用，或者代替PR的功能之类的。**\n\n## git cherry-pick 文档介绍 \n 学习git推荐这个教程（图文详细），可能比官网更容易理解\n### git cherry-pick 简介\n{% blockquote @Docs- https://www.atlassian.com/git/tutorials/cherry-pick %}\ngit cherry-pick is a powerful command that enables arbitrary Git commits to be picked by reference and appended to the current working HEAD. Cherry picking is the act of picking a commit from a branch and applying it to another. git cherry-pick can be useful for undoing changes. For example, say a commit is accidently made to the wrong branch. You can switch to the correct branch and cherry-pick the commit to where it should belong.\ngit cherry-pick 是一个强大的命令，它允许引用任意Git提交将其提交到当前分支HEAD上。Cherry picking 是将commit从一个分支应用到另一个分支的操作。git cherry-pick 对撤销更改很有用。比如：一个commit意外提交到错误的分支，你可以使用cherry-pick将这个commit提交到正确的分支上。\n{% endblockquote %}\n\n### git cherry-pick 使用场景\n{% blockquote @Docs- https://www.atlassian.com/git/tutorials/cherry-pick %}\ngit cherry-pick is a useful tool but not always a best practice. Cherry picking can cause duplicate commits and many scenarios where cherry picking would work, traditional merges are preferred instead. With that said git cherry-pick is a handy tool for a few scenarios...\ngit cherry-pick是一个有用的工具，但并不总是最佳实践。cherry-pick会导致重复提交，并且在很多情况下cherry-pick会起作用，然而传统的merge还是更合适。有了这个，git cherry-pick在某些情况下是一个方便的工具...\n{% endblockquote %}\n\n- 团队合作\n{% blockquote @Docs- https://www.atlassian.com/git/tutorials/cherry-pick %}\nOften times a team will find individual members working in or around the same code. Maybe a new product feature has a backend and frontend component. There may be some shared code between to two product sectors. Maybe the backend developer creates a data structure that the frontend will also need to utilize. The frontend developer could use git cherry-pick to pick the commit in which this hypothetical data structure was created. This pick would enable the frontend developer to continue progress on their side of the project.\n通常一个团队会发现在相同代码中或周围工作的单个成员。也许新产品功能具有后端和前端组件。两个产品部门之间可能存在一些共享代码。后端开发人员可能会创建前端也需要利用的数据结构。前端开发人员可以使用git cherry-pick来选择在其中创建此假设数据结构的提交。这种选择将使前端开发人员能够继续他们的项目进度。\n{% endblockquote %}\n比如多团队开发同一个大项目，他们从某一个模板项目中fork出来进行特化开发，当模板更新后可以直接git cherry pick对应的commitId就可以了。\n\n- bug快速修复\n{% blockquote @Docs- https://www.atlassian.com/git/tutorials/cherry-pick %}\nWhen a bug is discovered it is important to deliver a fix to end users as quickly as possible. For an example scenario,say a developer has started work on a new feature. During that new feature development they identify a pre-existing bug. The developer creates an explicit commit patching this bug. This new patch commit can be cherry-picked directly to the master branch to fix the bug before it effects more users.\n发现错误后，尽快将修补程序提供给最终用户非常重要。对于一个示例场景，例如开发人员已开始着手一项新功能。在进行新功能开发时，他们会识别出先前存在的错误。开发人员创建了一个明确的提交来修补此错误。可以将新提交的补丁直接挑选到master分支上，以在影响更多用户之前修复该错误。\n{% endblockquote %}\n\n- 撤销更改并恢复丢失的提交\n{% blockquote @Docs-  https://www.atlassian.com/git/tutorials/cherry-pick %}\nSometimes a feature branch may go stale and not get merged into master. Sometimes a pull request might get closed without merging. Git never loses those commits and through commands like git log and git reflog they can be found and cherry picked back to life.\n有时，功能分支可能会过时并且无法合并到master中。有时，拉取请求可能会在不合并的情况下关闭。 Git从不丢失那些提交，通过git log和git reflog之类的命令，它们可以被找到，并且重拾生命。\n{% endblockquote %}\n\n## 示例演示\n以下我创建一个新的仓库用于演示cherry-pick的使用场景：https://github.com/Liaomessi/git-advanced-guide\n如果你是一个git新手的话，可以跟着下面的步骤走，你一定会有所收获，并对cherry-pick有所理解\n1. 首先，我们fork这个 ` https://github.com/Liaomessi/git-advanced-guide ` 这个仓库,可以看到我们的github已经有了这个仓库\n ` git fork https://github.com/Liaomessi/git-advanced-guide `\n\n2. 然后我们按照传统（git）惯例，git clone下来这个仓库，这时这个仓库有两个分支 main、feature\n` git clone ` ~~https://github.com/Liaomessi/git-advanced-guide~~ ${这里填你自己fork过来的仓库}\n\n3. 我们切换到feature分支，新建文件feature.md\n添加一行内容：` this is feature1 `, 然后` git commit -m 'add feature1' `,\n再添加一行内容： ` this is feature2 `, 然后` git commit -m 'add feature2' `,\n这里我们已经在feature分支提交了两次代码，然后假设我们突然发现main分支的代码有问题，然后顺手就在当前分支把main分支的bug给修了后又开心的写我们的新feature。下面我们模拟这个场景：\n\n4. 在main.md文件中添加一行内容：` this is bug fix`, 然后` git commit -m 'fix bug1' `\n\n5. 修完bug我们接着写新feature，再在feature.md添加一行内容：` this is feature3 `,然后` git commit -m 'add feature3' `\n~~好家伙，我大意了，没有切出一个新分支去修bug，给我把commit搞混乱了，当时流眼泪了，捂着胯，说年轻人你不讲git。~~\n查看commit日志，`git log --oneline`现在我们feature分支中有了以下四个commit\n{% asset_img commit_log.png commit历史 %}\n\n6. `git checkout main`切换分支到main，`git cherry-pick 3819196`，再`git push`就将fix bug1这个commit提交到main分支了。\n\n7. 可能在开发中由于commit的内容不纯净会导致冲突，和正常merge代码一样解决冲突在commit就行了。\n\n## 总结\ngit cherry-pick 是一个方便且强大的命令，在有些场景下挺有用。但是不应该使用 git cherry-pick 去替代 git merge 和 git rebase。使用 git cherry-pick 需要借助 git log 查找对应的提交。\n","source":"_posts/git-advanced-guide.md","raw":"---\ntitle: git的进阶指南(git cherry-pick)\ncatalog: true\ndate: 2021-02-01 21:20:50\nsubtitle:\nheader-img:\ntags: \n  - git\n  - git进阶\n  - git cherry-pick\n---\n# git cherry-pick\n\n## 关于 git cherry-pick 的含义和适用场景\n### cherry-pick的简介\n cherry-pick (捡樱桃)，顾名思义:是在一堆樱桃（commit）中挑选出自己想要的樱桃（commit）。\n### cherry-pick的功能\n cherry-pick 的功能：在某一个分支中的commit中选出一个或多个commit提交到另一个分支。\n### cherry-pick的使用场景\n cherry-pick 的使用场景： 比如我们从master分支切出来一个feature分支用于开发新的功能，而在开发这个新功能的时候顺便改了几个bug，相信这种顺便改bug的情景应该很常见吧，哈哈哈。这就有个问题了，我们现在并没有打算把这个feature给合进master分支，但是我们希望把我们顺手改的几个bug给合进master里面，这时候我们就可以使用cherry-pick将指定的commit给提交到master分支中去。\n### cherry-pick的副作用(个人理解)\n 使用cherry-pick 会在两个分支提交相同的内容，但是生成不同的commitId，这样在后续进行merge分支的时候，对于cherry-pick提交的commit内容依然会在PR中展示出来，给人带来疑惑（两个分支都有这段代码，但是PR中还是会存在这段代码，这就是commitId不同导致的）。\n所以**cherry-pick 只适用于commit已经混乱了，无法生成一个纯净的PR时使用，它不应该被大范围的使用，或者代替PR的功能之类的。**\n\n## git cherry-pick 文档介绍 \n 学习git推荐这个教程（图文详细），可能比官网更容易理解\n### git cherry-pick 简介\n{% blockquote @Docs- https://www.atlassian.com/git/tutorials/cherry-pick %}\ngit cherry-pick is a powerful command that enables arbitrary Git commits to be picked by reference and appended to the current working HEAD. Cherry picking is the act of picking a commit from a branch and applying it to another. git cherry-pick can be useful for undoing changes. For example, say a commit is accidently made to the wrong branch. You can switch to the correct branch and cherry-pick the commit to where it should belong.\ngit cherry-pick 是一个强大的命令，它允许引用任意Git提交将其提交到当前分支HEAD上。Cherry picking 是将commit从一个分支应用到另一个分支的操作。git cherry-pick 对撤销更改很有用。比如：一个commit意外提交到错误的分支，你可以使用cherry-pick将这个commit提交到正确的分支上。\n{% endblockquote %}\n\n### git cherry-pick 使用场景\n{% blockquote @Docs- https://www.atlassian.com/git/tutorials/cherry-pick %}\ngit cherry-pick is a useful tool but not always a best practice. Cherry picking can cause duplicate commits and many scenarios where cherry picking would work, traditional merges are preferred instead. With that said git cherry-pick is a handy tool for a few scenarios...\ngit cherry-pick是一个有用的工具，但并不总是最佳实践。cherry-pick会导致重复提交，并且在很多情况下cherry-pick会起作用，然而传统的merge还是更合适。有了这个，git cherry-pick在某些情况下是一个方便的工具...\n{% endblockquote %}\n\n- 团队合作\n{% blockquote @Docs- https://www.atlassian.com/git/tutorials/cherry-pick %}\nOften times a team will find individual members working in or around the same code. Maybe a new product feature has a backend and frontend component. There may be some shared code between to two product sectors. Maybe the backend developer creates a data structure that the frontend will also need to utilize. The frontend developer could use git cherry-pick to pick the commit in which this hypothetical data structure was created. This pick would enable the frontend developer to continue progress on their side of the project.\n通常一个团队会发现在相同代码中或周围工作的单个成员。也许新产品功能具有后端和前端组件。两个产品部门之间可能存在一些共享代码。后端开发人员可能会创建前端也需要利用的数据结构。前端开发人员可以使用git cherry-pick来选择在其中创建此假设数据结构的提交。这种选择将使前端开发人员能够继续他们的项目进度。\n{% endblockquote %}\n比如多团队开发同一个大项目，他们从某一个模板项目中fork出来进行特化开发，当模板更新后可以直接git cherry pick对应的commitId就可以了。\n\n- bug快速修复\n{% blockquote @Docs- https://www.atlassian.com/git/tutorials/cherry-pick %}\nWhen a bug is discovered it is important to deliver a fix to end users as quickly as possible. For an example scenario,say a developer has started work on a new feature. During that new feature development they identify a pre-existing bug. The developer creates an explicit commit patching this bug. This new patch commit can be cherry-picked directly to the master branch to fix the bug before it effects more users.\n发现错误后，尽快将修补程序提供给最终用户非常重要。对于一个示例场景，例如开发人员已开始着手一项新功能。在进行新功能开发时，他们会识别出先前存在的错误。开发人员创建了一个明确的提交来修补此错误。可以将新提交的补丁直接挑选到master分支上，以在影响更多用户之前修复该错误。\n{% endblockquote %}\n\n- 撤销更改并恢复丢失的提交\n{% blockquote @Docs-  https://www.atlassian.com/git/tutorials/cherry-pick %}\nSometimes a feature branch may go stale and not get merged into master. Sometimes a pull request might get closed without merging. Git never loses those commits and through commands like git log and git reflog they can be found and cherry picked back to life.\n有时，功能分支可能会过时并且无法合并到master中。有时，拉取请求可能会在不合并的情况下关闭。 Git从不丢失那些提交，通过git log和git reflog之类的命令，它们可以被找到，并且重拾生命。\n{% endblockquote %}\n\n## 示例演示\n以下我创建一个新的仓库用于演示cherry-pick的使用场景：https://github.com/Liaomessi/git-advanced-guide\n如果你是一个git新手的话，可以跟着下面的步骤走，你一定会有所收获，并对cherry-pick有所理解\n1. 首先，我们fork这个 ` https://github.com/Liaomessi/git-advanced-guide ` 这个仓库,可以看到我们的github已经有了这个仓库\n ` git fork https://github.com/Liaomessi/git-advanced-guide `\n\n2. 然后我们按照传统（git）惯例，git clone下来这个仓库，这时这个仓库有两个分支 main、feature\n` git clone ` ~~https://github.com/Liaomessi/git-advanced-guide~~ ${这里填你自己fork过来的仓库}\n\n3. 我们切换到feature分支，新建文件feature.md\n添加一行内容：` this is feature1 `, 然后` git commit -m 'add feature1' `,\n再添加一行内容： ` this is feature2 `, 然后` git commit -m 'add feature2' `,\n这里我们已经在feature分支提交了两次代码，然后假设我们突然发现main分支的代码有问题，然后顺手就在当前分支把main分支的bug给修了后又开心的写我们的新feature。下面我们模拟这个场景：\n\n4. 在main.md文件中添加一行内容：` this is bug fix`, 然后` git commit -m 'fix bug1' `\n\n5. 修完bug我们接着写新feature，再在feature.md添加一行内容：` this is feature3 `,然后` git commit -m 'add feature3' `\n~~好家伙，我大意了，没有切出一个新分支去修bug，给我把commit搞混乱了，当时流眼泪了，捂着胯，说年轻人你不讲git。~~\n查看commit日志，`git log --oneline`现在我们feature分支中有了以下四个commit\n{% asset_img commit_log.png commit历史 %}\n\n6. `git checkout main`切换分支到main，`git cherry-pick 3819196`，再`git push`就将fix bug1这个commit提交到main分支了。\n\n7. 可能在开发中由于commit的内容不纯净会导致冲突，和正常merge代码一样解决冲突在commit就行了。\n\n## 总结\ngit cherry-pick 是一个方便且强大的命令，在有些场景下挺有用。但是不应该使用 git cherry-pick 去替代 git merge 和 git rebase。使用 git cherry-pick 需要借助 git log 查找对应的提交。\n","slug":"git-advanced-guide","published":1,"updated":"2021-04-08T11:52:08.137Z","_id":"ckn7kyf7w0001vgvsr88gjf3b","comments":1,"layout":"post","photos":[],"link":"","content":"<h1><span id=\"git-cherry-pick\">git cherry-pick</span></h1>\n<h2><span id=\"关于-git-cherry-pick-的含义和适用场景\">关于 git cherry-pick 的含义和适用场景</span></h2>\n<h3><span id=\"cherry-pick的简介\">cherry-pick的简介</span></h3>\n<p>cherry-pick (捡樱桃)，顾名思义:是在一堆樱桃（commit）中挑选出自己想要的樱桃（commit）。</p>\n<h3><span id=\"cherry-pick的功能\">cherry-pick的功能</span></h3>\n<p>cherry-pick 的功能：在某一个分支中的commit中选出一个或多个commit提交到另一个分支。</p>\n<h3><span id=\"cherry-pick的使用场景\">cherry-pick的使用场景</span></h3>\n<p>cherry-pick 的使用场景： 比如我们从master分支切出来一个feature分支用于开发新的功能，而在开发这个新功能的时候顺便改了几个bug，相信这种顺便改bug的情景应该很常见吧，哈哈哈。这就有个问题了，我们现在并没有打算把这个feature给合进master分支，但是我们希望把我们顺手改的几个bug给合进master里面，这时候我们就可以使用cherry-pick将指定的commit给提交到master分支中去。</p>\n<h3><span id=\"cherry-pick的副作用个人理解\">cherry-pick的副作用(个人理解)</span></h3>\n<p>使用cherry-pick 会在两个分支提交相同的内容，但是生成不同的commitId，这样在后续进行merge分支的时候，对于cherry-pick提交的commit内容依然会在PR中展示出来，给人带来疑惑（两个分支都有这段代码，但是PR中还是会存在这段代码，这就是commitId不同导致的）。<br>\n所以<strong>cherry-pick 只适用于commit已经混乱了，无法生成一个纯净的PR时使用，它不应该被大范围的使用，或者代替PR的功能之类的。</strong></p>\n<h2><span id=\"git-cherry-pick-文档介绍\">git cherry-pick 文档介绍</span></h2>\n<p>学习git推荐这个教程（图文详细），可能比官网更容易理解</p>\n<h3><span id=\"git-cherry-pick-简介\">git cherry-pick 简介</span></h3>\n<blockquote><p>git cherry-pick is a powerful command that enables arbitrary Git commits to be picked by reference and appended to the current working HEAD. Cherry picking is the act of picking a commit from a branch and applying it to another. git cherry-pick can be useful for undoing changes. For example, say a commit is accidently made to the wrong branch. You can switch to the correct branch and cherry-pick the commit to where it should belong.<br>\ngit cherry-pick 是一个强大的命令，它允许引用任意Git提交将其提交到当前分支HEAD上。Cherry picking 是将commit从一个分支应用到另一个分支的操作。git cherry-pick 对撤销更改很有用。比如：一个commit意外提交到错误的分支，你可以使用cherry-pick将这个commit提交到正确的分支上。</p>\n<footer><strong>@Docs-</strong><cite><a href=\"https://www.atlassian.com/git/tutorials/cherry-pick\" target=\"_blank\" rel=\"noopener\">www.atlassian.com/git/tutorials/cherry-pick</a></cite></footer></blockquote>\n<h3><span id=\"git-cherry-pick-使用场景\">git cherry-pick 使用场景</span></h3>\n<blockquote><p>git cherry-pick is a useful tool but not always a best practice. Cherry picking can cause duplicate commits and many scenarios where cherry picking would work, traditional merges are preferred instead. With that said git cherry-pick is a handy tool for a few scenarios…<br>\ngit cherry-pick是一个有用的工具，但并不总是最佳实践。cherry-pick会导致重复提交，并且在很多情况下cherry-pick会起作用，然而传统的merge还是更合适。有了这个，git cherry-pick在某些情况下是一个方便的工具…</p>\n<footer><strong>@Docs-</strong><cite><a href=\"https://www.atlassian.com/git/tutorials/cherry-pick\" target=\"_blank\" rel=\"noopener\">www.atlassian.com/git/tutorials/cherry-pick</a></cite></footer></blockquote>\n<ul>\n<li>团队合作</li>\n</ul>\n<blockquote><p>Often times a team will find individual members working in or around the same code. Maybe a new product feature has a backend and frontend component. There may be some shared code between to two product sectors. Maybe the backend developer creates a data structure that the frontend will also need to utilize. The frontend developer could use git cherry-pick to pick the commit in which this hypothetical data structure was created. This pick would enable the frontend developer to continue progress on their side of the project.<br>\n通常一个团队会发现在相同代码中或周围工作的单个成员。也许新产品功能具有后端和前端组件。两个产品部门之间可能存在一些共享代码。后端开发人员可能会创建前端也需要利用的数据结构。前端开发人员可以使用git cherry-pick来选择在其中创建此假设数据结构的提交。这种选择将使前端开发人员能够继续他们的项目进度。</p>\n<footer><strong>@Docs-</strong><cite><a href=\"https://www.atlassian.com/git/tutorials/cherry-pick\" target=\"_blank\" rel=\"noopener\">www.atlassian.com/git/tutorials/cherry-pick</a></cite></footer></blockquote>\n<p>比如多团队开发同一个大项目，他们从某一个模板项目中fork出来进行特化开发，当模板更新后可以直接git cherry pick对应的commitId就可以了。</p>\n<ul>\n<li>bug快速修复</li>\n</ul>\n<blockquote><p>When a bug is discovered it is important to deliver a fix to end users as quickly as possible. For an example scenario,say a developer has started work on a new feature. During that new feature development they identify a pre-existing bug. The developer creates an explicit commit patching this bug. This new patch commit can be cherry-picked directly to the master branch to fix the bug before it effects more users.<br>\n发现错误后，尽快将修补程序提供给最终用户非常重要。对于一个示例场景，例如开发人员已开始着手一项新功能。在进行新功能开发时，他们会识别出先前存在的错误。开发人员创建了一个明确的提交来修补此错误。可以将新提交的补丁直接挑选到master分支上，以在影响更多用户之前修复该错误。</p>\n<footer><strong>@Docs-</strong><cite><a href=\"https://www.atlassian.com/git/tutorials/cherry-pick\" target=\"_blank\" rel=\"noopener\">www.atlassian.com/git/tutorials/cherry-pick</a></cite></footer></blockquote>\n<ul>\n<li>撤销更改并恢复丢失的提交</li>\n</ul>\n<blockquote><p>Sometimes a feature branch may go stale and not get merged into master. Sometimes a pull request might get closed without merging. Git never loses those commits and through commands like git log and git reflog they can be found and cherry picked back to life.<br>\n有时，功能分支可能会过时并且无法合并到master中。有时，拉取请求可能会在不合并的情况下关闭。 Git从不丢失那些提交，通过git log和git reflog之类的命令，它们可以被找到，并且重拾生命。</p>\n<footer><strong>@Docs-</strong><cite><a href=\"https://www.atlassian.com/git/tutorials/cherry-pick\" target=\"_blank\" rel=\"noopener\">www.atlassian.com/git/tutorials/cherry-pick</a></cite></footer></blockquote>\n<h2><span id=\"示例演示\">示例演示</span></h2>\n<p>以下我创建一个新的仓库用于演示cherry-pick的使用场景：<a href=\"https://github.com/Liaomessi/git-advanced-guide\" target=\"_blank\" rel=\"noopener\">https://github.com/Liaomessi/git-advanced-guide</a><br>\n如果你是一个git新手的话，可以跟着下面的步骤走，你一定会有所收获，并对cherry-pick有所理解</p>\n<ol>\n<li>\n<p>首先，我们fork这个 <code>https://github.com/Liaomessi/git-advanced-guide</code> 这个仓库,可以看到我们的github已经有了这个仓库<br>\n<code>git fork https://github.com/Liaomessi/git-advanced-guide</code></p>\n</li>\n<li>\n<p>然后我们按照传统（git）惯例，git clone下来这个仓库，这时这个仓库有两个分支 main、feature<br>\n<code>git clone</code> <s><a href=\"https://github.com/Liaomessi/git-advanced-guide\" target=\"_blank\" rel=\"noopener\">https://github.com/Liaomessi/git-advanced-guide</a></s> ${这里填你自己fork过来的仓库}</p>\n</li>\n<li>\n<p>我们切换到feature分支，<a href=\"http://xn--feature-dg5kj40jfyn3ma.md\" target=\"_blank\" rel=\"noopener\">新建文件feature.md</a><br>\n添加一行内容：<code>this is feature1</code>, 然后<code>git commit -m 'add feature1'</code>,<br>\n再添加一行内容： <code>this is feature2</code>, 然后<code>git commit -m 'add feature2'</code>,<br>\n这里我们已经在feature分支提交了两次代码，然后假设我们突然发现main分支的代码有问题，然后顺手就在当前分支把main分支的bug给修了后又开心的写我们的新feature。下面我们模拟这个场景：</p>\n</li>\n<li>\n<p>在main.md文件中添加一行内容：<code>this is bug fix</code>, 然后<code>git commit -m 'fix bug1'</code></p>\n</li>\n<li>\n<p>修完bug我们接着写新feature，再在feature.md添加一行内容：<code>this is feature3</code>,然后<code>git commit -m 'add feature3'</code><br>\n<s>好家伙，我大意了，没有切出一个新分支去修bug，给我把commit搞混乱了，当时流眼泪了，捂着胯，说年轻人你不讲git。</s><br>\n查看commit日志，<code>git log --oneline</code>现在我们feature分支中有了以下四个commit</p>\n</li>\n</ol>\n<img src=\"/article/git-advanced-guide/commit_log.png\" title=\"commit历史\">\n<ol start=\"6\">\n<li>\n<p><code>git checkout main</code>切换分支到main，<code>git cherry-pick 3819196</code>，再<code>git push</code>就将fix bug1这个commit提交到main分支了。</p>\n</li>\n<li>\n<p>可能在开发中由于commit的内容不纯净会导致冲突，和正常merge代码一样解决冲突在commit就行了。</p>\n</li>\n</ol>\n<h2><span id=\"总结\">总结</span></h2>\n<p>git cherry-pick 是一个方便且强大的命令，在有些场景下挺有用。但是不应该使用 git cherry-pick 去替代 git merge 和 git rebase。使用 git cherry-pick 需要借助 git log 查找对应的提交。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>git cherry-pick</h1>\n<h2>关于 git cherry-pick 的含义和适用场景</h2>\n<h3>cherry-pick的简介</h3>\n<p>cherry-pick (捡樱桃)，顾名思义:是在一堆樱桃（commit）中挑选出自己想要的樱桃（commit）。</p>\n<h3>cherry-pick的功能</h3>\n<p>cherry-pick 的功能：在某一个分支中的commit中选出一个或多个commit提交到另一个分支。</p>\n<h3>cherry-pick的使用场景</h3>\n<p>cherry-pick 的使用场景： 比如我们从master分支切出来一个feature分支用于开发新的功能，而在开发这个新功能的时候顺便改了几个bug，相信这种顺便改bug的情景应该很常见吧，哈哈哈。这就有个问题了，我们现在并没有打算把这个feature给合进master分支，但是我们希望把我们顺手改的几个bug给合进master里面，这时候我们就可以使用cherry-pick将指定的commit给提交到master分支中去。</p>\n<h3>cherry-pick的副作用(个人理解)</h3>\n<p>使用cherry-pick 会在两个分支提交相同的内容，但是生成不同的commitId，这样在后续进行merge分支的时候，对于cherry-pick提交的commit内容依然会在PR中展示出来，给人带来疑惑（两个分支都有这段代码，但是PR中还是会存在这段代码，这就是commitId不同导致的）。<br>\n所以<strong>cherry-pick 只适用于commit已经混乱了，无法生成一个纯净的PR时使用，它不应该被大范围的使用，或者代替PR的功能之类的。</strong></p>\n<h2>git cherry-pick 文档介绍</h2>\n<p>学习git推荐这个教程（图文详细），可能比官网更容易理解</p>\n<h3>git cherry-pick 简介</h3>\n<blockquote><p>git cherry-pick is a powerful command that enables arbitrary Git commits to be picked by reference and appended to the current working HEAD. Cherry picking is the act of picking a commit from a branch and applying it to another. git cherry-pick can be useful for undoing changes. For example, say a commit is accidently made to the wrong branch. You can switch to the correct branch and cherry-pick the commit to where it should belong.<br>\ngit cherry-pick 是一个强大的命令，它允许引用任意Git提交将其提交到当前分支HEAD上。Cherry picking 是将commit从一个分支应用到另一个分支的操作。git cherry-pick 对撤销更改很有用。比如：一个commit意外提交到错误的分支，你可以使用cherry-pick将这个commit提交到正确的分支上。</p>\n<footer><strong>@Docs-</strong><cite><a href=\"https://www.atlassian.com/git/tutorials/cherry-pick\" target=\"_blank\" rel=\"noopener\">www.atlassian.com/git/tutorials/cherry-pick</a></cite></footer></blockquote>\n<h3>git cherry-pick 使用场景</h3>\n<blockquote><p>git cherry-pick is a useful tool but not always a best practice. Cherry picking can cause duplicate commits and many scenarios where cherry picking would work, traditional merges are preferred instead. With that said git cherry-pick is a handy tool for a few scenarios…<br>\ngit cherry-pick是一个有用的工具，但并不总是最佳实践。cherry-pick会导致重复提交，并且在很多情况下cherry-pick会起作用，然而传统的merge还是更合适。有了这个，git cherry-pick在某些情况下是一个方便的工具…</p>\n<footer><strong>@Docs-</strong><cite><a href=\"https://www.atlassian.com/git/tutorials/cherry-pick\" target=\"_blank\" rel=\"noopener\">www.atlassian.com/git/tutorials/cherry-pick</a></cite></footer></blockquote>\n<ul>\n<li>团队合作</li>\n</ul>\n<blockquote><p>Often times a team will find individual members working in or around the same code. Maybe a new product feature has a backend and frontend component. There may be some shared code between to two product sectors. Maybe the backend developer creates a data structure that the frontend will also need to utilize. The frontend developer could use git cherry-pick to pick the commit in which this hypothetical data structure was created. This pick would enable the frontend developer to continue progress on their side of the project.<br>\n通常一个团队会发现在相同代码中或周围工作的单个成员。也许新产品功能具有后端和前端组件。两个产品部门之间可能存在一些共享代码。后端开发人员可能会创建前端也需要利用的数据结构。前端开发人员可以使用git cherry-pick来选择在其中创建此假设数据结构的提交。这种选择将使前端开发人员能够继续他们的项目进度。</p>\n<footer><strong>@Docs-</strong><cite><a href=\"https://www.atlassian.com/git/tutorials/cherry-pick\" target=\"_blank\" rel=\"noopener\">www.atlassian.com/git/tutorials/cherry-pick</a></cite></footer></blockquote>\n<p>比如多团队开发同一个大项目，他们从某一个模板项目中fork出来进行特化开发，当模板更新后可以直接git cherry pick对应的commitId就可以了。</p>\n<ul>\n<li>bug快速修复</li>\n</ul>\n<blockquote><p>When a bug is discovered it is important to deliver a fix to end users as quickly as possible. For an example scenario,say a developer has started work on a new feature. During that new feature development they identify a pre-existing bug. The developer creates an explicit commit patching this bug. This new patch commit can be cherry-picked directly to the master branch to fix the bug before it effects more users.<br>\n发现错误后，尽快将修补程序提供给最终用户非常重要。对于一个示例场景，例如开发人员已开始着手一项新功能。在进行新功能开发时，他们会识别出先前存在的错误。开发人员创建了一个明确的提交来修补此错误。可以将新提交的补丁直接挑选到master分支上，以在影响更多用户之前修复该错误。</p>\n<footer><strong>@Docs-</strong><cite><a href=\"https://www.atlassian.com/git/tutorials/cherry-pick\" target=\"_blank\" rel=\"noopener\">www.atlassian.com/git/tutorials/cherry-pick</a></cite></footer></blockquote>\n<ul>\n<li>撤销更改并恢复丢失的提交</li>\n</ul>\n<blockquote><p>Sometimes a feature branch may go stale and not get merged into master. Sometimes a pull request might get closed without merging. Git never loses those commits and through commands like git log and git reflog they can be found and cherry picked back to life.<br>\n有时，功能分支可能会过时并且无法合并到master中。有时，拉取请求可能会在不合并的情况下关闭。 Git从不丢失那些提交，通过git log和git reflog之类的命令，它们可以被找到，并且重拾生命。</p>\n<footer><strong>@Docs-</strong><cite><a href=\"https://www.atlassian.com/git/tutorials/cherry-pick\" target=\"_blank\" rel=\"noopener\">www.atlassian.com/git/tutorials/cherry-pick</a></cite></footer></blockquote>\n<h2>示例演示</h2>\n<p>以下我创建一个新的仓库用于演示cherry-pick的使用场景：<a href=\"https://github.com/Liaomessi/git-advanced-guide\" target=\"_blank\" rel=\"noopener\">https://github.com/Liaomessi/git-advanced-guide</a><br>\n如果你是一个git新手的话，可以跟着下面的步骤走，你一定会有所收获，并对cherry-pick有所理解</p>\n<ol>\n<li>\n<p>首先，我们fork这个 <code>https://github.com/Liaomessi/git-advanced-guide</code> 这个仓库,可以看到我们的github已经有了这个仓库<br>\n<code>git fork https://github.com/Liaomessi/git-advanced-guide</code></p>\n</li>\n<li>\n<p>然后我们按照传统（git）惯例，git clone下来这个仓库，这时这个仓库有两个分支 main、feature<br>\n<code>git clone</code> <s><a href=\"https://github.com/Liaomessi/git-advanced-guide\" target=\"_blank\" rel=\"noopener\">https://github.com/Liaomessi/git-advanced-guide</a></s> ${这里填你自己fork过来的仓库}</p>\n</li>\n<li>\n<p>我们切换到feature分支，<a href=\"http://xn--feature-dg5kj40jfyn3ma.md\" target=\"_blank\" rel=\"noopener\">新建文件feature.md</a><br>\n添加一行内容：<code>this is feature1</code>, 然后<code>git commit -m 'add feature1'</code>,<br>\n再添加一行内容： <code>this is feature2</code>, 然后<code>git commit -m 'add feature2'</code>,<br>\n这里我们已经在feature分支提交了两次代码，然后假设我们突然发现main分支的代码有问题，然后顺手就在当前分支把main分支的bug给修了后又开心的写我们的新feature。下面我们模拟这个场景：</p>\n</li>\n<li>\n<p>在main.md文件中添加一行内容：<code>this is bug fix</code>, 然后<code>git commit -m 'fix bug1'</code></p>\n</li>\n<li>\n<p>修完bug我们接着写新feature，再在feature.md添加一行内容：<code>this is feature3</code>,然后<code>git commit -m 'add feature3'</code><br>\n<s>好家伙，我大意了，没有切出一个新分支去修bug，给我把commit搞混乱了，当时流眼泪了，捂着胯，说年轻人你不讲git。</s><br>\n查看commit日志，<code>git log --oneline</code>现在我们feature分支中有了以下四个commit</p>\n</li>\n</ol>\n<img src=\"/article/git-advanced-guide/commit_log.png\" title=\"commit历史\">\n<ol start=\"6\">\n<li>\n<p><code>git checkout main</code>切换分支到main，<code>git cherry-pick 3819196</code>，再<code>git push</code>就将fix bug1这个commit提交到main分支了。</p>\n</li>\n<li>\n<p>可能在开发中由于commit的内容不纯净会导致冲突，和正常merge代码一样解决冲突在commit就行了。</p>\n</li>\n</ol>\n<h2>总结</h2>\n<p>git cherry-pick 是一个方便且强大的命令，在有些场景下挺有用。但是不应该使用 git cherry-pick 去替代 git merge 和 git rebase。使用 git cherry-pick 需要借助 git log 查找对应的提交。</p>\n"},{"title":"nginx系列(一) 配置SSL证书","catalog":true,"date":"2021-01-11T14:52:03.000Z","subtitle":null,"header-img":null,"catagories":["nginx"],"_content":"\n## 安装证书全流程\n{% asset_img image-20201106211115329.png 安装证书流程图 %}\n\n### 下载证书压缩包并解压，生成证书的key和pem\n\n- 如下图是我在阿里云的证书，点击下载。\n\n{% asset_img image-20201106212028665.png 阿里云证书 %}\n\n- 选择你需要的类型，我使用nginx，下载了nginx的版本。\n\n{% asset_img image-20201106212102055.png nginx证书 %}\n\n- 解压证书压缩包，生成key和 pem，如下图所示。上传至服务器即可，服务器路径可随意，记住路径即可。\n\n{% asset_img image-20201106212349144.png 证书上传服务器 %}\n\n### 配置nginx.conf使ssl证书生效\n\n```xml server {\t\n    listen 443 ssl;      #增加ssl访问支持\n    server_name  www.demo.com demo.com;\n    root         /demo/dict;\n    ssl_certificate ${你的.pem文件的路径};   #将domain name.pem替换成您证书的文件名。\n    ssl_certificate_key ${你的.key文件的路径};   #将domain name.key替换成您证书的密钥文件名。\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  #使用此加密套件。\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #使用该协议进行配置。\n    ssl_prefer_server_ciphers on;  \n    location / {\n         root /demo/dict; \n         index index.html;\n    }\n}\n```\n\n### 配置http重写路由至https\n\n```xml server{\n listen       80;\n server_name  www.demo.com demo.com;\n rewrite ^(.*) https://$host$1 permanent;\n}\n```\n","source":"_posts/nginx1.md","raw":"---\ntitle: nginx系列(一) 配置SSL证书\ncatalog: true\ndate: 2021-01-11 22:52:03\nsubtitle:\nheader-img:\ntags: \n  - nginx\ncatagories:\n  - nginx\n---\n\n## 安装证书全流程\n{% asset_img image-20201106211115329.png 安装证书流程图 %}\n\n### 下载证书压缩包并解压，生成证书的key和pem\n\n- 如下图是我在阿里云的证书，点击下载。\n\n{% asset_img image-20201106212028665.png 阿里云证书 %}\n\n- 选择你需要的类型，我使用nginx，下载了nginx的版本。\n\n{% asset_img image-20201106212102055.png nginx证书 %}\n\n- 解压证书压缩包，生成key和 pem，如下图所示。上传至服务器即可，服务器路径可随意，记住路径即可。\n\n{% asset_img image-20201106212349144.png 证书上传服务器 %}\n\n### 配置nginx.conf使ssl证书生效\n\n```xml server {\t\n    listen 443 ssl;      #增加ssl访问支持\n    server_name  www.demo.com demo.com;\n    root         /demo/dict;\n    ssl_certificate ${你的.pem文件的路径};   #将domain name.pem替换成您证书的文件名。\n    ssl_certificate_key ${你的.key文件的路径};   #将domain name.key替换成您证书的密钥文件名。\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  #使用此加密套件。\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #使用该协议进行配置。\n    ssl_prefer_server_ciphers on;  \n    location / {\n         root /demo/dict; \n         index index.html;\n    }\n}\n```\n\n### 配置http重写路由至https\n\n```xml server{\n listen       80;\n server_name  www.demo.com demo.com;\n rewrite ^(.*) https://$host$1 permanent;\n}\n```\n","slug":"nginx1","published":1,"updated":"2021-03-07T04:40:38.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckn7kyf830003vgvs1nk02jdy","content":"<h2><span id=\"安装证书全流程\">安装证书全流程</span></h2>\n<img src=\"/article/nginx1/image-20201106211115329.png\" title=\"安装证书流程图\">\n<h3><span id=\"下载证书压缩包并解压生成证书的key和pem\">下载证书压缩包并解压，生成证书的key和pem</span></h3>\n<ul>\n<li>如下图是我在阿里云的证书，点击下载。</li>\n</ul>\n<img src=\"/article/nginx1/image-20201106212028665.png\" title=\"阿里云证书\">\n<ul>\n<li>选择你需要的类型，我使用nginx，下载了nginx的版本。</li>\n</ul>\n<img src=\"/article/nginx1/image-20201106212102055.png\" title=\"nginx证书\">\n<ul>\n<li>解压证书压缩包，生成key和 pem，如下图所示。上传至服务器即可，服务器路径可随意，记住路径即可。</li>\n</ul>\n<img src=\"/article/nginx1/image-20201106212349144.png\" title=\"证书上传服务器\">\n<h3><span id=\"配置nginxconf使ssl证书生效\">配置nginx.conf使ssl证书生效</span></h3>\n<figure class=\"highlight xml\"><figcaption><span>server &#123;\t</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    listen 443 ssl;      #增加ssl访问支持</span><br><span class=\"line\">    server_name  www.demo.com demo.com;</span><br><span class=\"line\">    root         /demo/dict;</span><br><span class=\"line\">    ssl_certificate $&#123;你的.pem文件的路径&#125;;   #将domain name.pem替换成您证书的文件名。</span><br><span class=\"line\">    ssl_certificate_key $&#123;你的.key文件的路径&#125;;   #将domain name.key替换成您证书的密钥文件名。</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  #使用此加密套件。</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #使用该协议进行配置。</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;  </span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">         root /demo/dict; </span><br><span class=\"line\">         index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"配置http重写路由至https\">配置http重写路由至https</span></h3>\n<figure class=\"highlight xml\"><figcaption><span>server&#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> listen       80;</span><br><span class=\"line\"> server_name  www.demo.com demo.com;</span><br><span class=\"line\"> rewrite ^(.*) https://$host$1 permanent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2>安装证书全流程</h2>\n<img src=\"/article/nginx1/image-20201106211115329.png\" title=\"安装证书流程图\">\n<h3>下载证书压缩包并解压，生成证书的key和pem</h3>\n<ul>\n<li>如下图是我在阿里云的证书，点击下载。</li>\n</ul>\n<img src=\"/article/nginx1/image-20201106212028665.png\" title=\"阿里云证书\">\n<ul>\n<li>选择你需要的类型，我使用nginx，下载了nginx的版本。</li>\n</ul>\n<img src=\"/article/nginx1/image-20201106212102055.png\" title=\"nginx证书\">\n<ul>\n<li>解压证书压缩包，生成key和 pem，如下图所示。上传至服务器即可，服务器路径可随意，记住路径即可。</li>\n</ul>\n<img src=\"/article/nginx1/image-20201106212349144.png\" title=\"证书上传服务器\">\n<h3>配置nginx.conf使ssl证书生效</h3>\n<figure class=\"highlight xml\"><figcaption><span>server &#123;\t</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    listen 443 ssl;      #增加ssl访问支持</span><br><span class=\"line\">    server_name  www.demo.com demo.com;</span><br><span class=\"line\">    root         /demo/dict;</span><br><span class=\"line\">    ssl_certificate $&#123;你的.pem文件的路径&#125;;   #将domain name.pem替换成您证书的文件名。</span><br><span class=\"line\">    ssl_certificate_key $&#123;你的.key文件的路径&#125;;   #将domain name.key替换成您证书的密钥文件名。</span><br><span class=\"line\">    ssl_session_timeout 5m;</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;  #使用此加密套件。</span><br><span class=\"line\">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;   #使用该协议进行配置。</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;  </span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">         root /demo/dict; </span><br><span class=\"line\">         index index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3>配置http重写路由至https</h3>\n<figure class=\"highlight xml\"><figcaption><span>server&#123;</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> listen       80;</span><br><span class=\"line\"> server_name  www.demo.com demo.com;</span><br><span class=\"line\"> rewrite ^(.*) https://$host$1 permanent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"如何本地调试微信登录","catalog":true,"date":"2021-01-19T03:31:10.000Z","subtitle":null,"header-img":null,"_content":"\n## 申请微信登录的前置条件\n\n1. 你必须有一个已经在公网可以访问的域名网址,并且是有内容的,在开发前期可以只有一个 index.html 也是没有关系的,只要网站域名过审了就行.\n2. 你需要在微信开放平台申请创建一个应用,不管你是创建手机应用, 网页, 微信小程序,都需要申请创建.\n   申请创建应用过程中你需要注意以下几点:\n- 申请微信开发者账号不能是私人邮箱,必须绑定的是公司邮箱\n- 需要上传一个网站登录表，里面是你公司的一些信息。（如果是个人的话不行，可以借助一些第三方公司注册）\n- 创建应用中以网页举例:你需要填写正确的回调域(即微信登录后跳转的页面,一般为你网站的主页,如果 www.tultuq.com)\n\n以下是最终微信审批通过后的应用详情：\n{% asset_img wechat_open.jpg 微信开发应用申请示例 %}\n\n## 开发一个微信登录的接口\n\n3. 申请好微信登录后,过个一两天微信会审批通过,你可以拿到 appID 和 appSecret,你可以在应用程序中使用\n4. 开发一个微信登录的功能,这里我省略掉了,不是本章的重点,如果有小伙伴有兴趣评论区留言可以考虑出一期.\n\n## 本地调试微信登录\n\n5. 开发好以后修改本地机器的 hosts 文件(windows 中在\tC:\\Windows\\System32\\drivers\\etc\\hosts ,Linux 和 Mac 中在 /etc/hosts),在其中添加一调记录(这里依然以上面 www.tultuq.com 为例):\n\n下图即为我本地调试网站微信登录的截图，可以看到顺利的跳转到了微信登录:\n{% asset_img local_demo.jpg 微信登录示例 %}\n以及本地idea中可以看到有微信登录log打出：\n{% asset_img idea_log.jpg 编辑器日志 %}\n\n\n```xml 127.0.0.1 www.tultuq.com ```\n\n**tips**: hosts文件的用处: 就是加快域名解析,在外面访问网址前先通过 hosts 的映射,如果有命中的话就不会去访问网络中 DNS 服务器解析域名了.所以我们在 hosts 文件中添加了上述配置,可以在外面访问 www.tultuq.com 网址时直接访问 127.0.0.1(本地).\n\n6. 如果你是后台去访问微信登录的话,可以将启动端口设置为 80 端口(这是访问万维网的默认端口),这样你访问后台微信登录接口即可直接使用 www.tultuq.com 加上后台接口的路径即可本地访问微信登录成功了.\n\n## 结束语\n\n - 以上全文皆是我闲暇时刻顺手写下,后续会添加一些流程的图片,如有不足请多指教.\n - 如果你还有其他疑问,可以 email 或者 github 给我留言\n - 如果觉得本篇文章不错的话,支持一下吧.","source":"_posts/wechat-open-api.md","raw":"---\ntitle: 如何本地调试微信登录\ncatalog: true\ndate: 2021-01-19 11:31:10\nsubtitle: \nheader-img:\ntags: \n  - 微信登录\n  - 本地调试\n---\n\n## 申请微信登录的前置条件\n\n1. 你必须有一个已经在公网可以访问的域名网址,并且是有内容的,在开发前期可以只有一个 index.html 也是没有关系的,只要网站域名过审了就行.\n2. 你需要在微信开放平台申请创建一个应用,不管你是创建手机应用, 网页, 微信小程序,都需要申请创建.\n   申请创建应用过程中你需要注意以下几点:\n- 申请微信开发者账号不能是私人邮箱,必须绑定的是公司邮箱\n- 需要上传一个网站登录表，里面是你公司的一些信息。（如果是个人的话不行，可以借助一些第三方公司注册）\n- 创建应用中以网页举例:你需要填写正确的回调域(即微信登录后跳转的页面,一般为你网站的主页,如果 www.tultuq.com)\n\n以下是最终微信审批通过后的应用详情：\n{% asset_img wechat_open.jpg 微信开发应用申请示例 %}\n\n## 开发一个微信登录的接口\n\n3. 申请好微信登录后,过个一两天微信会审批通过,你可以拿到 appID 和 appSecret,你可以在应用程序中使用\n4. 开发一个微信登录的功能,这里我省略掉了,不是本章的重点,如果有小伙伴有兴趣评论区留言可以考虑出一期.\n\n## 本地调试微信登录\n\n5. 开发好以后修改本地机器的 hosts 文件(windows 中在\tC:\\Windows\\System32\\drivers\\etc\\hosts ,Linux 和 Mac 中在 /etc/hosts),在其中添加一调记录(这里依然以上面 www.tultuq.com 为例):\n\n下图即为我本地调试网站微信登录的截图，可以看到顺利的跳转到了微信登录:\n{% asset_img local_demo.jpg 微信登录示例 %}\n以及本地idea中可以看到有微信登录log打出：\n{% asset_img idea_log.jpg 编辑器日志 %}\n\n\n```xml 127.0.0.1 www.tultuq.com ```\n\n**tips**: hosts文件的用处: 就是加快域名解析,在外面访问网址前先通过 hosts 的映射,如果有命中的话就不会去访问网络中 DNS 服务器解析域名了.所以我们在 hosts 文件中添加了上述配置,可以在外面访问 www.tultuq.com 网址时直接访问 127.0.0.1(本地).\n\n6. 如果你是后台去访问微信登录的话,可以将启动端口设置为 80 端口(这是访问万维网的默认端口),这样你访问后台微信登录接口即可直接使用 www.tultuq.com 加上后台接口的路径即可本地访问微信登录成功了.\n\n## 结束语\n\n - 以上全文皆是我闲暇时刻顺手写下,后续会添加一些流程的图片,如有不足请多指教.\n - 如果你还有其他疑问,可以 email 或者 github 给我留言\n - 如果觉得本篇文章不错的话,支持一下吧.","slug":"wechat-open-api","published":1,"updated":"2021-03-07T04:40:38.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckn7kyf8a0006vgvs7tn7tzku","content":"<h2><span id=\"申请微信登录的前置条件\">申请微信登录的前置条件</span></h2>\n<ol>\n<li>你必须有一个已经在公网可以访问的域名网址,并且是有内容的,在开发前期可以只有一个 index.html 也是没有关系的,只要网站域名过审了就行.</li>\n<li>你需要在微信开放平台申请创建一个应用,不管你是创建手机应用, 网页, 微信小程序,都需要申请创建.<br>\n申请创建应用过程中你需要注意以下几点:</li>\n</ol>\n<ul>\n<li>申请微信开发者账号不能是私人邮箱,必须绑定的是公司邮箱</li>\n<li>需要上传一个网站登录表，里面是你公司的一些信息。（如果是个人的话不行，可以借助一些第三方公司注册）</li>\n<li>创建应用中以网页举例:你需要填写正确的回调域(即微信登录后跳转的页面,一般为你网站的主页,如果 <a href=\"http://www.tultuq.com\" target=\"_blank\" rel=\"noopener\">www.tultuq.com</a>)</li>\n</ul>\n<p>以下是最终微信审批通过后的应用详情：</p>\n<img src=\"/article/wechat-open-api/wechat_open.jpg\" title=\"微信开发应用申请示例\">\n<h2><span id=\"开发一个微信登录的接口\">开发一个微信登录的接口</span></h2>\n<ol start=\"3\">\n<li>申请好微信登录后,过个一两天微信会审批通过,你可以拿到 appID 和 appSecret,你可以在应用程序中使用</li>\n<li>开发一个微信登录的功能,这里我省略掉了,不是本章的重点,如果有小伙伴有兴趣评论区留言可以考虑出一期.</li>\n</ol>\n<h2><span id=\"本地调试微信登录\">本地调试微信登录</span></h2>\n<ol start=\"5\">\n<li>开发好以后修改本地机器的 hosts 文件(windows 中在\tC:\\Windows\\System32\\drivers\\etc\\hosts ,Linux 和 Mac 中在 /etc/hosts),在其中添加一调记录(这里依然以上面 <a href=\"http://www.tultuq.com\" target=\"_blank\" rel=\"noopener\">www.tultuq.com</a> 为例):</li>\n</ol>\n<p>下图即为我本地调试网站微信登录的截图，可以看到顺利的跳转到了微信登录:</p>\n<img src=\"/article/wechat-open-api/local_demo.jpg\" title=\"微信登录示例\">\n<p>以及本地idea中可以看到有微信登录log打出：</p>\n<img src=\"/article/wechat-open-api/idea_log.jpg\" title=\"编辑器日志\">\n<p><code>xml 127.0.0.1 www.tultuq.com</code></p>\n<p><strong>tips</strong>: hosts文件的用处: 就是加快域名解析,在外面访问网址前先通过 hosts 的映射,如果有命中的话就不会去访问网络中 DNS 服务器解析域名了.所以我们在 hosts 文件中添加了上述配置,可以在外面访问 <a href=\"http://www.tultuq.com\" target=\"_blank\" rel=\"noopener\">www.tultuq.com</a> 网址时直接访问 127.0.0.1(本地).</p>\n<ol start=\"6\">\n<li>如果你是后台去访问微信登录的话,可以将启动端口设置为 80 端口(这是访问万维网的默认端口),这样你访问后台微信登录接口即可直接使用 <a href=\"http://www.tultuq.com\" target=\"_blank\" rel=\"noopener\">www.tultuq.com</a> 加上后台接口的路径即可本地访问微信登录成功了.</li>\n</ol>\n<h2><span id=\"结束语\">结束语</span></h2>\n<ul>\n<li>以上全文皆是我闲暇时刻顺手写下,后续会添加一些流程的图片,如有不足请多指教.</li>\n<li>如果你还有其他疑问,可以 email 或者 github 给我留言</li>\n<li>如果觉得本篇文章不错的话,支持一下吧.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2>申请微信登录的前置条件</h2>\n<ol>\n<li>你必须有一个已经在公网可以访问的域名网址,并且是有内容的,在开发前期可以只有一个 index.html 也是没有关系的,只要网站域名过审了就行.</li>\n<li>你需要在微信开放平台申请创建一个应用,不管你是创建手机应用, 网页, 微信小程序,都需要申请创建.<br>\n申请创建应用过程中你需要注意以下几点:</li>\n</ol>\n<ul>\n<li>申请微信开发者账号不能是私人邮箱,必须绑定的是公司邮箱</li>\n<li>需要上传一个网站登录表，里面是你公司的一些信息。（如果是个人的话不行，可以借助一些第三方公司注册）</li>\n<li>创建应用中以网页举例:你需要填写正确的回调域(即微信登录后跳转的页面,一般为你网站的主页,如果 <a href=\"http://www.tultuq.com\" target=\"_blank\" rel=\"noopener\">www.tultuq.com</a>)</li>\n</ul>\n<p>以下是最终微信审批通过后的应用详情：</p>\n<img src=\"/article/wechat-open-api/wechat_open.jpg\" title=\"微信开发应用申请示例\">\n<h2>开发一个微信登录的接口</h2>\n<ol start=\"3\">\n<li>申请好微信登录后,过个一两天微信会审批通过,你可以拿到 appID 和 appSecret,你可以在应用程序中使用</li>\n<li>开发一个微信登录的功能,这里我省略掉了,不是本章的重点,如果有小伙伴有兴趣评论区留言可以考虑出一期.</li>\n</ol>\n<h2>本地调试微信登录</h2>\n<ol start=\"5\">\n<li>开发好以后修改本地机器的 hosts 文件(windows 中在\tC:\\Windows\\System32\\drivers\\etc\\hosts ,Linux 和 Mac 中在 /etc/hosts),在其中添加一调记录(这里依然以上面 <a href=\"http://www.tultuq.com\" target=\"_blank\" rel=\"noopener\">www.tultuq.com</a> 为例):</li>\n</ol>\n<p>下图即为我本地调试网站微信登录的截图，可以看到顺利的跳转到了微信登录:</p>\n<img src=\"/article/wechat-open-api/local_demo.jpg\" title=\"微信登录示例\">\n<p>以及本地idea中可以看到有微信登录log打出：</p>\n<img src=\"/article/wechat-open-api/idea_log.jpg\" title=\"编辑器日志\">\n<p><code>xml 127.0.0.1 www.tultuq.com</code></p>\n<p><strong>tips</strong>: hosts文件的用处: 就是加快域名解析,在外面访问网址前先通过 hosts 的映射,如果有命中的话就不会去访问网络中 DNS 服务器解析域名了.所以我们在 hosts 文件中添加了上述配置,可以在外面访问 <a href=\"http://www.tultuq.com\" target=\"_blank\" rel=\"noopener\">www.tultuq.com</a> 网址时直接访问 127.0.0.1(本地).</p>\n<ol start=\"6\">\n<li>如果你是后台去访问微信登录的话,可以将启动端口设置为 80 端口(这是访问万维网的默认端口),这样你访问后台微信登录接口即可直接使用 <a href=\"http://www.tultuq.com\" target=\"_blank\" rel=\"noopener\">www.tultuq.com</a> 加上后台接口的路径即可本地访问微信登录成功了.</li>\n</ol>\n<h2>结束语</h2>\n<ul>\n<li>以上全文皆是我闲暇时刻顺手写下,后续会添加一些流程的图片,如有不足请多指教.</li>\n<li>如果你还有其他疑问,可以 email 或者 github 给我留言</li>\n<li>如果觉得本篇文章不错的话,支持一下吧.</li>\n</ul>\n"},{"title":"git的进阶指南(Windows下配置git代理)","catalog":true,"date":"2021-04-07T14:10:51.000Z","subtitle":null,"header-img":null,"_content":"# Windows下的git代理配置\n 由于近些年国内访问github速度慢且很不稳定，所以作为一名合格的程序员你一定需要一个科学梯子，这是本次教程的一个前提。\n\n## 关于github\n 相信只要你有一个梯子你就可以给访问github加速，但是对于git clone 很多人表示龟速，以下从两个角度介绍一下Windows下如何给git clone加速\n \n## git clone的代理配置\n对于git clone我们常用的有两种方式可以clone下项目，https方式和ssh方式，先简单介绍一下这两种方式的不同处：\n1. https方式使用用户名／密码授权，优点是可用性强，方便，缺点是速度慢，每次推送都需要输入口令。\n2. ssh方式需要将publish key上传到github的设置中，通过公私钥来验证用户获取授权建立通道，优点是速度快安全性高，缺点是需要上传公钥到github上\n\n### 关于使用https方式clone的配置\nhttps方式的clone配置需要在git config中配置全局代理，需要注意的`https://127.0.0.1:1080`代表你的梯子监听的协议和端口。\n```shell script\ngit config --global http.https://github.com.proxy https://127.0.0.1:1080\ngit config --global https.https://github.com.proxy https://127.0.0.1:1080\n```\n我使用的这个梯子的协议和端口如下，所以下面的配置我将`https://127.0.0.1:1080`换成`socks://127.0.0.1:10808`,你需要根据你的梯子配置对即可\n{% asset_img proxy_config.png 梯子监听协议和端口 %}\n有了以上配置，你就可以使用https方式舒服的git clone了，但是对于ssh方式的git clone我们还需要额外的配置。\n\n### 关于使用ssh方式clone的配置\nssh方式的clone配置比较简单，你只需要在本用户的.ssh目录下（和你id_rsa.pub同级目录）创建一个config文件(不要有文件扩展名)，将代理信息配置进去即可，配置如下：\n```shell script\nHost github.com\n  User git\n  Port 22\n  Hostname github.com\n  IdentityFile \"C:\\Users\\MRqby\\.ssh\\id_rsa\"\n  ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p\n  TCPKeepAlive yes\n\nHost ssh.github.com\n  User git\n  Port 443\n  Hostname ssh.github.com\n  IdentityFile \"C:\\Users\\MRqby\\.ssh\\id_rsa\"\n  ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p\n  TCPKeepAlive yes\n```\n使用mac和linux的同学应该看着很熟悉了，这个打家劫舍（配置跳板机啥的）必备良药呀！\n这里再插一嘴，Stack Overflow等上面有些人告诉你了直接在git config配置ssl verify设为false，这显然不是个好解决方法啊，慎用。\n\n##结语\n以上为Windows下配置git clone的代理全部内容，其实mac/linux上配置也是一样的，只是目录有些不同而已。\n磨刀不误砍柴工，这些基础的配置是为了让我们对技术更加热情，更丝滑的使用gayhub（手动滑稽）。","source":"_posts/git-proxy.md","raw":"---\ntitle: git的进阶指南(Windows下配置git代理)\ncatalog: true\ndate: 2021-04-07 22:10:51\nsubtitle:\nheader-img:\ntags: \n    - git\n    - windows\n---\n# Windows下的git代理配置\n 由于近些年国内访问github速度慢且很不稳定，所以作为一名合格的程序员你一定需要一个科学梯子，这是本次教程的一个前提。\n\n## 关于github\n 相信只要你有一个梯子你就可以给访问github加速，但是对于git clone 很多人表示龟速，以下从两个角度介绍一下Windows下如何给git clone加速\n \n## git clone的代理配置\n对于git clone我们常用的有两种方式可以clone下项目，https方式和ssh方式，先简单介绍一下这两种方式的不同处：\n1. https方式使用用户名／密码授权，优点是可用性强，方便，缺点是速度慢，每次推送都需要输入口令。\n2. ssh方式需要将publish key上传到github的设置中，通过公私钥来验证用户获取授权建立通道，优点是速度快安全性高，缺点是需要上传公钥到github上\n\n### 关于使用https方式clone的配置\nhttps方式的clone配置需要在git config中配置全局代理，需要注意的`https://127.0.0.1:1080`代表你的梯子监听的协议和端口。\n```shell script\ngit config --global http.https://github.com.proxy https://127.0.0.1:1080\ngit config --global https.https://github.com.proxy https://127.0.0.1:1080\n```\n我使用的这个梯子的协议和端口如下，所以下面的配置我将`https://127.0.0.1:1080`换成`socks://127.0.0.1:10808`,你需要根据你的梯子配置对即可\n{% asset_img proxy_config.png 梯子监听协议和端口 %}\n有了以上配置，你就可以使用https方式舒服的git clone了，但是对于ssh方式的git clone我们还需要额外的配置。\n\n### 关于使用ssh方式clone的配置\nssh方式的clone配置比较简单，你只需要在本用户的.ssh目录下（和你id_rsa.pub同级目录）创建一个config文件(不要有文件扩展名)，将代理信息配置进去即可，配置如下：\n```shell script\nHost github.com\n  User git\n  Port 22\n  Hostname github.com\n  IdentityFile \"C:\\Users\\MRqby\\.ssh\\id_rsa\"\n  ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p\n  TCPKeepAlive yes\n\nHost ssh.github.com\n  User git\n  Port 443\n  Hostname ssh.github.com\n  IdentityFile \"C:\\Users\\MRqby\\.ssh\\id_rsa\"\n  ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p\n  TCPKeepAlive yes\n```\n使用mac和linux的同学应该看着很熟悉了，这个打家劫舍（配置跳板机啥的）必备良药呀！\n这里再插一嘴，Stack Overflow等上面有些人告诉你了直接在git config配置ssl verify设为false，这显然不是个好解决方法啊，慎用。\n\n##结语\n以上为Windows下配置git clone的代理全部内容，其实mac/linux上配置也是一样的，只是目录有些不同而已。\n磨刀不误砍柴工，这些基础的配置是为了让我们对技术更加热情，更丝滑的使用gayhub（手动滑稽）。","slug":"git-proxy","published":1,"updated":"2021-04-07T15:00:59.393Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckn7kyf8e0008vgvsogkl2sms","content":"<h1><span id=\"windows下的git代理配置\">Windows下的git代理配置</span></h1>\n<p>由于近些年国内访问github速度慢且很不稳定，所以作为一名合格的程序员你一定需要一个科学梯子，这是本次教程的一个前提。</p>\n<h2><span id=\"关于github\">关于github</span></h2>\n<p>相信只要你有一个梯子你就可以给访问github加速，但是对于git clone 很多人表示龟速，以下从两个角度介绍一下Windows下如何给git clone加速</p>\n<h2><span id=\"git-clone的代理配置\">git clone的代理配置</span></h2>\n<p>对于git clone我们常用的有两种方式可以clone下项目，https方式和ssh方式，先简单介绍一下这两种方式的不同处：</p>\n<ol>\n<li>https方式使用用户名／密码授权，优点是可用性强，方便，缺点是速度慢，每次推送都需要输入口令。</li>\n<li>ssh方式需要将publish key上传到github的设置中，通过公私钥来验证用户获取授权建立通道，优点是速度快安全性高，缺点是需要上传公钥到github上</li>\n</ol>\n<h3><span id=\"关于使用https方式clone的配置\">关于使用https方式clone的配置</span></h3>\n<p>https方式的clone配置需要在git config中配置全局代理，需要注意的<code>https://127.0.0.1:1080</code>代表你的梯子监听的协议和端口。</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.https://github.com.proxy https://127.0.0.1:1080</span><br><span class=\"line\">git config --global https.https://github.com.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n<p>我使用的这个梯子的协议和端口如下，所以下面的配置我将<code>https://127.0.0.1:1080</code>换成<code>socks://127.0.0.1:10808</code>,你需要根据你的梯子配置对即可</p>\n\n<p>有了以上配置，你就可以使用https方式舒服的git clone了，但是对于ssh方式的git clone我们还需要额外的配置。</p>\n<h3><span id=\"关于使用ssh方式clone的配置\">关于使用ssh方式clone的配置</span></h3>\n<p>ssh方式的clone配置比较简单，你只需要在本用户的.ssh目录下（和你id_rsa.pub同级目录）创建一个config文件(不要有文件扩展名)，将代理信息配置进去即可，配置如下：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">  User git</span><br><span class=\"line\">  Port 22</span><br><span class=\"line\">  Hostname github.com</span><br><span class=\"line\">  IdentityFile \"C:\\Users\\MRqby\\.ssh\\id_rsa\"</span><br><span class=\"line\">  ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br><span class=\"line\">  TCPKeepAlive yes</span><br><span class=\"line\"></span><br><span class=\"line\">Host ssh.github.com</span><br><span class=\"line\">  User git</span><br><span class=\"line\">  Port 443</span><br><span class=\"line\">  Hostname ssh.github.com</span><br><span class=\"line\">  IdentityFile \"C:\\Users\\MRqby\\.ssh\\id_rsa\"</span><br><span class=\"line\">  ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br><span class=\"line\">  TCPKeepAlive yes</span><br></pre></td></tr></table></figure>\n<p>使用mac和linux的同学应该看着很熟悉了，这个打家劫舍（配置跳板机啥的）必备良药呀！<br>\n这里再插一嘴，Stack Overflow等上面有些人告诉你了直接在git config配置ssl verify设为false，这显然不是个好解决方法啊，慎用。</p>\n<p>##结语<br>\n以上为Windows下配置git clone的代理全部内容，其实mac/linux上配置也是一样的，只是目录有些不同而已。<br>\n磨刀不误砍柴工，这些基础的配置是为了让我们对技术更加热情，更丝滑的使用gayhub（手动滑稽）。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Windows下的git代理配置</h1>\n<p>由于近些年国内访问github速度慢且很不稳定，所以作为一名合格的程序员你一定需要一个科学梯子，这是本次教程的一个前提。</p>\n<h2>关于github</h2>\n<p>相信只要你有一个梯子你就可以给访问github加速，但是对于git clone 很多人表示龟速，以下从两个角度介绍一下Windows下如何给git clone加速</p>\n<h2>git clone的代理配置</h2>\n<p>对于git clone我们常用的有两种方式可以clone下项目，https方式和ssh方式，先简单介绍一下这两种方式的不同处：</p>\n<ol>\n<li>https方式使用用户名／密码授权，优点是可用性强，方便，缺点是速度慢，每次推送都需要输入口令。</li>\n<li>ssh方式需要将publish key上传到github的设置中，通过公私钥来验证用户获取授权建立通道，优点是速度快安全性高，缺点是需要上传公钥到github上</li>\n</ol>\n<h3>关于使用https方式clone的配置</h3>\n<p>https方式的clone配置需要在git config中配置全局代理，需要注意的<code>https://127.0.0.1:1080</code>代表你的梯子监听的协议和端口。</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.https://github.com.proxy https://127.0.0.1:1080</span><br><span class=\"line\">git config --global https.https://github.com.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n<p>我使用的这个梯子的协议和端口如下，所以下面的配置我将<code>https://127.0.0.1:1080</code>换成<code>socks://127.0.0.1:10808</code>,你需要根据你的梯子配置对即可</p>\n\n<p>有了以上配置，你就可以使用https方式舒服的git clone了，但是对于ssh方式的git clone我们还需要额外的配置。</p>\n<h3>关于使用ssh方式clone的配置</h3>\n<p>ssh方式的clone配置比较简单，你只需要在本用户的.ssh目录下（和你id_rsa.pub同级目录）创建一个config文件(不要有文件扩展名)，将代理信息配置进去即可，配置如下：</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">  User git</span><br><span class=\"line\">  Port 22</span><br><span class=\"line\">  Hostname github.com</span><br><span class=\"line\">  IdentityFile \"C:\\Users\\MRqby\\.ssh\\id_rsa\"</span><br><span class=\"line\">  ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br><span class=\"line\">  TCPKeepAlive yes</span><br><span class=\"line\"></span><br><span class=\"line\">Host ssh.github.com</span><br><span class=\"line\">  User git</span><br><span class=\"line\">  Port 443</span><br><span class=\"line\">  Hostname ssh.github.com</span><br><span class=\"line\">  IdentityFile \"C:\\Users\\MRqby\\.ssh\\id_rsa\"</span><br><span class=\"line\">  ProxyCommand connect -S 127.0.0.1:1080 -a none %h %p</span><br><span class=\"line\">  TCPKeepAlive yes</span><br></pre></td></tr></table></figure>\n<p>使用mac和linux的同学应该看着很熟悉了，这个打家劫舍（配置跳板机啥的）必备良药呀！<br>\n这里再插一嘴，Stack Overflow等上面有些人告诉你了直接在git config配置ssl verify设为false，这显然不是个好解决方法啊，慎用。</p>\n<p>##结语<br>\n以上为Windows下配置git clone的代理全部内容，其实mac/linux上配置也是一样的，只是目录有些不同而已。<br>\n磨刀不误砍柴工，这些基础的配置是为了让我们对技术更加热情，更丝滑的使用gayhub（手动滑稽）。</p>\n"},{"title":"状态模式在生产实践中的应用","catalog":true,"date":"2021-03-07T04:13:56.000Z","subtitle":null,"header-img":null,"catagories":["设计模式"],"_content":"\n# 状态模式\n生产实践中的状态模式应用\n\n## 模拟场景\n现有一个电影管理系统，对于电影有状态转移图，如下，对于不同权限的人员有不同的状态流转。{% asset_img 电影状态转移图.png 状态转移图 %}\n现在我们设计对于监管人员它可以控制电影的上下架，对于上映方它能决定电影上下架但不能决定电影永久下架等。总之就是不同人员能操作的电影生命周期状态是不一样的。\n\n## 场景分析\n1. 为快速满足需求，最便捷的方式当然是使用if、else来判断所有可能的场景，或者switch。随着状态越来越复杂，拥有的权限越来越细化，这段代码的逻辑分支将会越来越多，review起来会非常费神，可能除了单元测试够多，没人能敢保证它的逻辑分支一定没问题。\n伪代码可能如下：\n```java\nif(movie.getStatus() == INITAL){\n    switch(movie.getOpLevel()){\n        case OWNER:\n            //....\n        case MOVIE_POSTER:\n            //....\n        case REGULATOR:\n            //....\n    }\n}else if(movie.getStatus() == PREPARING){\n    //...\n}\n```\n\n2. 这时我们想到使用有限状态机来实现，伪代码如下：\n\n```java\nvoid prepare(Movie movie){\n    if(Initial == movie.getStatus()){\n        if(OpLevel.OWNER == movie.getOpLevel()){\n            // do some thing\n            movie.setStatus(Preparing);\n        }\n    }\n    throw new Exception(\"没权限或者状态不对啦\");\n}\n\nvoid pause(Movie movie){\n    if(PREPARING != movie.getStatus() && ACTIVE != movie.getStatus()){\n        if(OpLevel.REGULATOR == movie.getOpLevel()){\n            // do some thing\n            movie.setStatus(PAUSED);\n        }\n    }\n    throw new Exception(\"没权限或者状态不对啦\");\n}\n```\n但是不论是直接一顿怼if/else还是使用状态机，都避免不了一个问题，那就是有很多的逻辑分支需要判断，并且在生产实践中很多时候一个状态是可以自旋或者可重入的，我亲身体验过这种if/else的头疼之处，就是过了两个星期让我自己看那段代码我也不能说完全看懂所有分支的判断。所以这种场景最合适的还是使用状态模式，它能帮我干掉几乎所有的if/else,让review代码的人一目了然，单元测试也很容易覆盖所有 test case。\n\n## 最优解\n使用状态模式可以干掉几乎所有的逻辑分支，通过继承和实现来将逻辑分支转换成对应的状态处理器，为了去掉不同状态下可执行的操作判断，我们可以给状态接口方法全部默认实现一个不可操作的方法。\n在对应状态下只需要实现可以执行的方法，这样就去掉了所有状态判断。并且该模式下对于自旋或者可重入的状态支持就简单很多了。\n对于用户权限判断其实也可以实现一个类似的功能。\n以下是伪代码:\n定义一个拥有所有状态操作的接口，并赋予默认实现为不支持该操作。\n```java\npublic interface MovieState {\n    default void create(Movie movie) { \n        throw new IllegalArgumentException(\"该状态不支持筹备电影.\" + movie.getStatus()); \n    }\n\n    default void preparing(Movie movie) {\n        throw new IllegalArgumentException(\"该状态不支持拍电影\" + movie.getStatus());\n    }\n\n    default void publish(Movie movie) {\n        throw new IllegalArgumentException(\"该状态不支持上映电影\" + movie.getStatus());\n    }\n\n    default void pause(Movie movie) { \n        throw new IllegalArgumentException(\"该状态不支持被迫下架电影\" + movie.getStatus()); \n    }\n\n    default void stop(Movie movie) {\n        throw new IllegalArgumentException(\"该状态不支持停止上映电影\" + movie.getStatus());\n    }\n\n    default void complete(Movie movie) {\n        throw new IllegalArgumentException(\"该状态不支持计算电影收益\" + movie.getStatus());\n    }\n\n    default void archive(Movie movie) {\n        throw new IllegalArgumentException(\"该状态不支持归档电影\" + movie.getStatus());\n    }\n}\n```\n\n然后对于不同状态可以转换的状态我们予以一一实现即可。\n```java\n@Service(\"INITIAL\")\n public class InitialState implements MovieState {\n     @Override\n     public void preparing(Movie movie) {\n         if (movie.getOpLevel() != OpLevel.OWNER) {\n             throw new IllegalArgumentException(\"只有制片人能拍电影\");\n         }\n         //TODO: 做些操作电影对象的行为（拍电影，剪辑，后期啊啥的）\n         movie.setStatus(MovieStatus.PREPARING);\n         //TODO: 保存操作过的电影\n     }\n }\n\n@Service(\"PREPARING\")\npublic class PreparingState implements MovieState {\n    @Override\n    public void pause(Movie movie) {\n        if (movie.getOpLevel()!= OpLevel.REGULATOR){\n            throw new IllegalArgumentException(\"只有监管人员才可以下架电影。\");\n        }\n        movie.setStatus(MovieStatus.PAUSED);\n    }\n\n    @Override\n    public void publish(Movie movie) {\n        if (movie.getOpLevel()!= OpLevel.OWNER && OpLevel.MOVIE_POSTER != movie.getOpLevel()){\n            throw new IllegalArgumentException(\"只有制作者和上映者才可以上映电影。\");\n        }\n        movie.setStatus(MovieStatus.ACTIVE);\n    }\n}\n```\n在调用状态转换时我们只需要加载对应的状态处理器来处理即可。\n\n## 总结\n在生产应用中状态模式是一个会被大量使用到的场景，尤其是状态转移本身还会牵扯到其他的判断的（比如这里的权限判断等），不是一个状态转移图可以描述的情况选，使用状态模式绝对会为你带来极大的便利。尤为明显的是，如果使用if/else,当逻辑分支越来越多，提交代码没有人能用肉眼review出来代码是否有逻辑bug。但是使用状态模式，配上状态转移图，即使是代码小白都可以帮你review代码了。单元测试也好写多了（啊歪，我绝对不是说单元测试代码覆盖率啊，别想歪了）\n\n## 附录\n一个基于Springboot模拟以上场景的demo的代码我已放在github中了，有兴趣的同学可以去看一下 https://github.com/Liaomessi/DesignPatterns/tree/main/state-pattern","source":"_posts/state-pattern.md","raw":"---\ntitle: 状态模式在生产实践中的应用\ncatalog: true\ndate: 2021-03-07 12:13:56\nsubtitle: \nheader-img:\ntags:\n  - 设计模式\n  - 状态模式\n  - 生产实践\ncatagories:\n  - 设计模式\n---\n\n# 状态模式\n生产实践中的状态模式应用\n\n## 模拟场景\n现有一个电影管理系统，对于电影有状态转移图，如下，对于不同权限的人员有不同的状态流转。{% asset_img 电影状态转移图.png 状态转移图 %}\n现在我们设计对于监管人员它可以控制电影的上下架，对于上映方它能决定电影上下架但不能决定电影永久下架等。总之就是不同人员能操作的电影生命周期状态是不一样的。\n\n## 场景分析\n1. 为快速满足需求，最便捷的方式当然是使用if、else来判断所有可能的场景，或者switch。随着状态越来越复杂，拥有的权限越来越细化，这段代码的逻辑分支将会越来越多，review起来会非常费神，可能除了单元测试够多，没人能敢保证它的逻辑分支一定没问题。\n伪代码可能如下：\n```java\nif(movie.getStatus() == INITAL){\n    switch(movie.getOpLevel()){\n        case OWNER:\n            //....\n        case MOVIE_POSTER:\n            //....\n        case REGULATOR:\n            //....\n    }\n}else if(movie.getStatus() == PREPARING){\n    //...\n}\n```\n\n2. 这时我们想到使用有限状态机来实现，伪代码如下：\n\n```java\nvoid prepare(Movie movie){\n    if(Initial == movie.getStatus()){\n        if(OpLevel.OWNER == movie.getOpLevel()){\n            // do some thing\n            movie.setStatus(Preparing);\n        }\n    }\n    throw new Exception(\"没权限或者状态不对啦\");\n}\n\nvoid pause(Movie movie){\n    if(PREPARING != movie.getStatus() && ACTIVE != movie.getStatus()){\n        if(OpLevel.REGULATOR == movie.getOpLevel()){\n            // do some thing\n            movie.setStatus(PAUSED);\n        }\n    }\n    throw new Exception(\"没权限或者状态不对啦\");\n}\n```\n但是不论是直接一顿怼if/else还是使用状态机，都避免不了一个问题，那就是有很多的逻辑分支需要判断，并且在生产实践中很多时候一个状态是可以自旋或者可重入的，我亲身体验过这种if/else的头疼之处，就是过了两个星期让我自己看那段代码我也不能说完全看懂所有分支的判断。所以这种场景最合适的还是使用状态模式，它能帮我干掉几乎所有的if/else,让review代码的人一目了然，单元测试也很容易覆盖所有 test case。\n\n## 最优解\n使用状态模式可以干掉几乎所有的逻辑分支，通过继承和实现来将逻辑分支转换成对应的状态处理器，为了去掉不同状态下可执行的操作判断，我们可以给状态接口方法全部默认实现一个不可操作的方法。\n在对应状态下只需要实现可以执行的方法，这样就去掉了所有状态判断。并且该模式下对于自旋或者可重入的状态支持就简单很多了。\n对于用户权限判断其实也可以实现一个类似的功能。\n以下是伪代码:\n定义一个拥有所有状态操作的接口，并赋予默认实现为不支持该操作。\n```java\npublic interface MovieState {\n    default void create(Movie movie) { \n        throw new IllegalArgumentException(\"该状态不支持筹备电影.\" + movie.getStatus()); \n    }\n\n    default void preparing(Movie movie) {\n        throw new IllegalArgumentException(\"该状态不支持拍电影\" + movie.getStatus());\n    }\n\n    default void publish(Movie movie) {\n        throw new IllegalArgumentException(\"该状态不支持上映电影\" + movie.getStatus());\n    }\n\n    default void pause(Movie movie) { \n        throw new IllegalArgumentException(\"该状态不支持被迫下架电影\" + movie.getStatus()); \n    }\n\n    default void stop(Movie movie) {\n        throw new IllegalArgumentException(\"该状态不支持停止上映电影\" + movie.getStatus());\n    }\n\n    default void complete(Movie movie) {\n        throw new IllegalArgumentException(\"该状态不支持计算电影收益\" + movie.getStatus());\n    }\n\n    default void archive(Movie movie) {\n        throw new IllegalArgumentException(\"该状态不支持归档电影\" + movie.getStatus());\n    }\n}\n```\n\n然后对于不同状态可以转换的状态我们予以一一实现即可。\n```java\n@Service(\"INITIAL\")\n public class InitialState implements MovieState {\n     @Override\n     public void preparing(Movie movie) {\n         if (movie.getOpLevel() != OpLevel.OWNER) {\n             throw new IllegalArgumentException(\"只有制片人能拍电影\");\n         }\n         //TODO: 做些操作电影对象的行为（拍电影，剪辑，后期啊啥的）\n         movie.setStatus(MovieStatus.PREPARING);\n         //TODO: 保存操作过的电影\n     }\n }\n\n@Service(\"PREPARING\")\npublic class PreparingState implements MovieState {\n    @Override\n    public void pause(Movie movie) {\n        if (movie.getOpLevel()!= OpLevel.REGULATOR){\n            throw new IllegalArgumentException(\"只有监管人员才可以下架电影。\");\n        }\n        movie.setStatus(MovieStatus.PAUSED);\n    }\n\n    @Override\n    public void publish(Movie movie) {\n        if (movie.getOpLevel()!= OpLevel.OWNER && OpLevel.MOVIE_POSTER != movie.getOpLevel()){\n            throw new IllegalArgumentException(\"只有制作者和上映者才可以上映电影。\");\n        }\n        movie.setStatus(MovieStatus.ACTIVE);\n    }\n}\n```\n在调用状态转换时我们只需要加载对应的状态处理器来处理即可。\n\n## 总结\n在生产应用中状态模式是一个会被大量使用到的场景，尤其是状态转移本身还会牵扯到其他的判断的（比如这里的权限判断等），不是一个状态转移图可以描述的情况选，使用状态模式绝对会为你带来极大的便利。尤为明显的是，如果使用if/else,当逻辑分支越来越多，提交代码没有人能用肉眼review出来代码是否有逻辑bug。但是使用状态模式，配上状态转移图，即使是代码小白都可以帮你review代码了。单元测试也好写多了（啊歪，我绝对不是说单元测试代码覆盖率啊，别想歪了）\n\n## 附录\n一个基于Springboot模拟以上场景的demo的代码我已放在github中了，有兴趣的同学可以去看一下 https://github.com/Liaomessi/DesignPatterns/tree/main/state-pattern","slug":"state-pattern","published":1,"updated":"2021-03-07T04:33:45.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckn7kyf8g0009vgvsi88g1n90","content":"<h1><span id=\"状态模式\">状态模式</span></h1>\n<p>生产实践中的状态模式应用</p>\n<h2><span id=\"模拟场景\">模拟场景</span></h2>\n<p>现有一个电影管理系统，对于电影有状态转移图，如下，对于不同权限的人员有不同的状态流转。<img src=\"/article/state-pattern/电影状态转移图.png\" title=\"状态转移图\"><br>\n现在我们设计对于监管人员它可以控制电影的上下架，对于上映方它能决定电影上下架但不能决定电影永久下架等。总之就是不同人员能操作的电影生命周期状态是不一样的。</p>\n<h2><span id=\"场景分析\">场景分析</span></h2>\n<ol>\n<li>为快速满足需求，最便捷的方式当然是使用if、else来判断所有可能的场景，或者switch。随着状态越来越复杂，拥有的权限越来越细化，这段代码的逻辑分支将会越来越多，review起来会非常费神，可能除了单元测试够多，没人能敢保证它的逻辑分支一定没问题。<br>\n伪代码可能如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(movie.getStatus() == INITAL)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(movie.getOpLevel())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OWNER:</span><br><span class=\"line\">            <span class=\"comment\">//....</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MOVIE_POSTER:</span><br><span class=\"line\">            <span class=\"comment\">//....</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> REGULATOR:</span><br><span class=\"line\">            <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(movie.getStatus() == PREPARING)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>这时我们想到使用有限状态机来实现，伪代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(Movie movie)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Initial == movie.getStatus())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(OpLevel.OWNER == movie.getOpLevel())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// do some thing</span></span><br><span class=\"line\">            movie.setStatus(Preparing);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"没权限或者状态不对啦\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pause</span><span class=\"params\">(Movie movie)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(PREPARING != movie.getStatus() &amp;&amp; ACTIVE != movie.getStatus())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(OpLevel.REGULATOR == movie.getOpLevel())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// do some thing</span></span><br><span class=\"line\">            movie.setStatus(PAUSED);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"没权限或者状态不对啦\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是不论是直接一顿怼if/else还是使用状态机，都避免不了一个问题，那就是有很多的逻辑分支需要判断，并且在生产实践中很多时候一个状态是可以自旋或者可重入的，我亲身体验过这种if/else的头疼之处，就是过了两个星期让我自己看那段代码我也不能说完全看懂所有分支的判断。所以这种场景最合适的还是使用状态模式，它能帮我干掉几乎所有的if/else,让review代码的人一目了然，单元测试也很容易覆盖所有 test case。</p>\n<h2><span id=\"最优解\">最优解</span></h2>\n<p>使用状态模式可以干掉几乎所有的逻辑分支，通过继承和实现来将逻辑分支转换成对应的状态处理器，为了去掉不同状态下可执行的操作判断，我们可以给状态接口方法全部默认实现一个不可操作的方法。<br>\n在对应状态下只需要实现可以执行的方法，这样就去掉了所有状态判断。并且该模式下对于自旋或者可重入的状态支持就简单很多了。<br>\n对于用户权限判断其实也可以实现一个类似的功能。<br>\n以下是伪代码:<br>\n定义一个拥有所有状态操作的接口，并赋予默认实现为不支持该操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MovieState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(Movie movie)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持筹备电影.\"</span> + movie.getStatus()); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">preparing</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持拍电影\"</span> + movie.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">publish</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持上映电影\"</span> + movie.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">pause</span><span class=\"params\">(Movie movie)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持被迫下架电影\"</span> + movie.getStatus()); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持停止上映电影\"</span> + movie.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">complete</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持计算电影收益\"</span> + movie.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">archive</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持归档电影\"</span> + movie.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后对于不同状态可以转换的状态我们予以一一实现即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"INITIAL\"</span>)</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InitialState</span> <span class=\"keyword\">implements</span> <span class=\"title\">MovieState</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preparing</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (movie.getOpLevel() != OpLevel.OWNER) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"只有制片人能拍电影\"</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">//<span class=\"doctag\">TODO:</span> 做些操作电影对象的行为（拍电影，剪辑，后期啊啥的）</span></span><br><span class=\"line\">         movie.setStatus(MovieStatus.PREPARING);</span><br><span class=\"line\">         <span class=\"comment\">//<span class=\"doctag\">TODO:</span> 保存操作过的电影</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"PREPARING\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PreparingState</span> <span class=\"keyword\">implements</span> <span class=\"title\">MovieState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pause</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (movie.getOpLevel()!= OpLevel.REGULATOR)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"只有监管人员才可以下架电影。\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        movie.setStatus(MovieStatus.PAUSED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">publish</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (movie.getOpLevel()!= OpLevel.OWNER &amp;&amp; OpLevel.MOVIE_POSTER != movie.getOpLevel())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"只有制作者和上映者才可以上映电影。\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        movie.setStatus(MovieStatus.ACTIVE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在调用状态转换时我们只需要加载对应的状态处理器来处理即可。</p>\n<h2><span id=\"总结\">总结</span></h2>\n<p>在生产应用中状态模式是一个会被大量使用到的场景，尤其是状态转移本身还会牵扯到其他的判断的（比如这里的权限判断等），不是一个状态转移图可以描述的情况选，使用状态模式绝对会为你带来极大的便利。尤为明显的是，如果使用if/else,当逻辑分支越来越多，提交代码没有人能用肉眼review出来代码是否有逻辑bug。但是使用状态模式，配上状态转移图，即使是代码小白都可以帮你review代码了。单元测试也好写多了（啊歪，我绝对不是说单元测试代码覆盖率啊，别想歪了）</p>\n<h2><span id=\"附录\">附录</span></h2>\n<p>一个基于Springboot模拟以上场景的demo的代码我已放在github中了，有兴趣的同学可以去看一下 <a href=\"https://github.com/Liaomessi/DesignPatterns/tree/main/state-pattern\" target=\"_blank\" rel=\"noopener\">https://github.com/Liaomessi/DesignPatterns/tree/main/state-pattern</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1>状态模式</h1>\n<p>生产实践中的状态模式应用</p>\n<h2>模拟场景</h2>\n<p>现有一个电影管理系统，对于电影有状态转移图，如下，对于不同权限的人员有不同的状态流转。<img src=\"/article/state-pattern/电影状态转移图.png\" title=\"状态转移图\"><br>\n现在我们设计对于监管人员它可以控制电影的上下架，对于上映方它能决定电影上下架但不能决定电影永久下架等。总之就是不同人员能操作的电影生命周期状态是不一样的。</p>\n<h2>场景分析</h2>\n<ol>\n<li>为快速满足需求，最便捷的方式当然是使用if、else来判断所有可能的场景，或者switch。随着状态越来越复杂，拥有的权限越来越细化，这段代码的逻辑分支将会越来越多，review起来会非常费神，可能除了单元测试够多，没人能敢保证它的逻辑分支一定没问题。<br>\n伪代码可能如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(movie.getStatus() == INITAL)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(movie.getOpLevel())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> OWNER:</span><br><span class=\"line\">            <span class=\"comment\">//....</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> MOVIE_POSTER:</span><br><span class=\"line\">            <span class=\"comment\">//....</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> REGULATOR:</span><br><span class=\"line\">            <span class=\"comment\">//....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(movie.getStatus() == PREPARING)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>这时我们想到使用有限状态机来实现，伪代码如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(Movie movie)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Initial == movie.getStatus())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(OpLevel.OWNER == movie.getOpLevel())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// do some thing</span></span><br><span class=\"line\">            movie.setStatus(Preparing);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"没权限或者状态不对啦\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pause</span><span class=\"params\">(Movie movie)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(PREPARING != movie.getStatus() &amp;&amp; ACTIVE != movie.getStatus())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(OpLevel.REGULATOR == movie.getOpLevel())&#123;</span><br><span class=\"line\">            <span class=\"comment\">// do some thing</span></span><br><span class=\"line\">            movie.setStatus(PAUSED);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"没权限或者状态不对啦\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是不论是直接一顿怼if/else还是使用状态机，都避免不了一个问题，那就是有很多的逻辑分支需要判断，并且在生产实践中很多时候一个状态是可以自旋或者可重入的，我亲身体验过这种if/else的头疼之处，就是过了两个星期让我自己看那段代码我也不能说完全看懂所有分支的判断。所以这种场景最合适的还是使用状态模式，它能帮我干掉几乎所有的if/else,让review代码的人一目了然，单元测试也很容易覆盖所有 test case。</p>\n<h2>最优解</h2>\n<p>使用状态模式可以干掉几乎所有的逻辑分支，通过继承和实现来将逻辑分支转换成对应的状态处理器，为了去掉不同状态下可执行的操作判断，我们可以给状态接口方法全部默认实现一个不可操作的方法。<br>\n在对应状态下只需要实现可以执行的方法，这样就去掉了所有状态判断。并且该模式下对于自旋或者可重入的状态支持就简单很多了。<br>\n对于用户权限判断其实也可以实现一个类似的功能。<br>\n以下是伪代码:<br>\n定义一个拥有所有状态操作的接口，并赋予默认实现为不支持该操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MovieState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(Movie movie)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持筹备电影.\"</span> + movie.getStatus()); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">preparing</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持拍电影\"</span> + movie.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">publish</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持上映电影\"</span> + movie.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">pause</span><span class=\"params\">(Movie movie)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持被迫下架电影\"</span> + movie.getStatus()); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持停止上映电影\"</span> + movie.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">complete</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持计算电影收益\"</span> + movie.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">default</span> <span class=\"keyword\">void</span> <span class=\"title\">archive</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"该状态不支持归档电影\"</span> + movie.getStatus());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后对于不同状态可以转换的状态我们予以一一实现即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"INITIAL\"</span>)</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InitialState</span> <span class=\"keyword\">implements</span> <span class=\"title\">MovieState</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preparing</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (movie.getOpLevel() != OpLevel.OWNER) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"只有制片人能拍电影\"</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">//<span class=\"doctag\">TODO:</span> 做些操作电影对象的行为（拍电影，剪辑，后期啊啥的）</span></span><br><span class=\"line\">         movie.setStatus(MovieStatus.PREPARING);</span><br><span class=\"line\">         <span class=\"comment\">//<span class=\"doctag\">TODO:</span> 保存操作过的电影</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(<span class=\"string\">\"PREPARING\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PreparingState</span> <span class=\"keyword\">implements</span> <span class=\"title\">MovieState</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pause</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (movie.getOpLevel()!= OpLevel.REGULATOR)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"只有监管人员才可以下架电影。\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        movie.setStatus(MovieStatus.PAUSED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">publish</span><span class=\"params\">(Movie movie)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (movie.getOpLevel()!= OpLevel.OWNER &amp;&amp; OpLevel.MOVIE_POSTER != movie.getOpLevel())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"只有制作者和上映者才可以上映电影。\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        movie.setStatus(MovieStatus.ACTIVE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在调用状态转换时我们只需要加载对应的状态处理器来处理即可。</p>\n<h2>总结</h2>\n<p>在生产应用中状态模式是一个会被大量使用到的场景，尤其是状态转移本身还会牵扯到其他的判断的（比如这里的权限判断等），不是一个状态转移图可以描述的情况选，使用状态模式绝对会为你带来极大的便利。尤为明显的是，如果使用if/else,当逻辑分支越来越多，提交代码没有人能用肉眼review出来代码是否有逻辑bug。但是使用状态模式，配上状态转移图，即使是代码小白都可以帮你review代码了。单元测试也好写多了（啊歪，我绝对不是说单元测试代码覆盖率啊，别想歪了）</p>\n<h2>附录</h2>\n<p>一个基于Springboot模拟以上场景的demo的代码我已放在github中了，有兴趣的同学可以去看一下 <a href=\"https://github.com/Liaomessi/DesignPatterns/tree/main/state-pattern\" target=\"_blank\" rel=\"noopener\">https://github.com/Liaomessi/DesignPatterns/tree/main/state-pattern</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/git-proxy/proxy_config.jpg","slug":"proxy_config.jpg","post":"ckn7kyf8e0008vgvsogkl2sms","modified":0,"renderable":0},{"_id":"source/_posts/state-pattern/电影状态转移图.png","slug":"电影状态转移图.png","post":"ckn7kyf8g0009vgvsi88g1n90","modified":0,"renderable":0},{"_id":"source/_posts/git-advanced-guide/commit_log.png","slug":"commit_log.png","post":"ckn7kyf7w0001vgvsr88gjf3b","modified":0,"renderable":0},{"_id":"source/_posts/git-advanced-guide/init.jpg","slug":"init.jpg","post":"ckn7kyf7w0001vgvsr88gjf3b","modified":0,"renderable":0},{"_id":"source/_posts/wechat-open-api/idea_log.jpg","slug":"idea_log.jpg","post":"ckn7kyf8a0006vgvs7tn7tzku","modified":0,"renderable":0},{"_id":"source/_posts/wechat-open-api/local_demo.jpg","slug":"local_demo.jpg","post":"ckn7kyf8a0006vgvs7tn7tzku","modified":0,"renderable":0},{"_id":"source/_posts/wechat-open-api/wechat_open.jpg","slug":"wechat_open.jpg","post":"ckn7kyf8a0006vgvs7tn7tzku","modified":0,"renderable":0},{"_id":"source/_posts/nginx1/image-20201106211115329.png","slug":"image-20201106211115329.png","post":"ckn7kyf830003vgvs1nk02jdy","modified":0,"renderable":0},{"_id":"source/_posts/nginx1/image-20201106212028665.png","slug":"image-20201106212028665.png","post":"ckn7kyf830003vgvs1nk02jdy","modified":0,"renderable":0},{"_id":"source/_posts/nginx1/image-20201106212102055.png","slug":"image-20201106212102055.png","post":"ckn7kyf830003vgvs1nk02jdy","modified":0,"renderable":0},{"_id":"source/_posts/nginx1/image-20201106212349144.png","slug":"image-20201106212349144.png","post":"ckn7kyf830003vgvs1nk02jdy","modified":0,"renderable":0},{"_id":"source/_posts/nginx1/image-20201107124307791.png","slug":"image-20201107124307791.png","post":"ckn7kyf830003vgvs1nk02jdy","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ckn7kyf7w0001vgvsr88gjf3b","tag_id":"ckn7kyf870005vgvsoilw4yw3","_id":"ckn7kyf8l000dvgvsqur5i4wi"},{"post_id":"ckn7kyf7w0001vgvsr88gjf3b","tag_id":"ckn7kyf8i000avgvspz1geyk8","_id":"ckn7kyf8l000evgvs9wasaedb"},{"post_id":"ckn7kyf7w0001vgvsr88gjf3b","tag_id":"ckn7kyf8k000bvgvs9okkhzh5","_id":"ckn7kyf8m000gvgvs23bd4fu8"},{"post_id":"ckn7kyf830003vgvs1nk02jdy","tag_id":"ckn7kyf8k000cvgvsthrtoo14","_id":"ckn7kyf8m000hvgvshvqhcaqx"},{"post_id":"ckn7kyf8a0006vgvs7tn7tzku","tag_id":"ckn7kyf8l000fvgvsqg027nyx","_id":"ckn7kyf8o000kvgvsqlk21glp"},{"post_id":"ckn7kyf8a0006vgvs7tn7tzku","tag_id":"ckn7kyf8n000ivgvsk9ontw0y","_id":"ckn7kyf8o000lvgvs2op49ntc"},{"post_id":"ckn7kyf8e0008vgvsogkl2sms","tag_id":"ckn7kyf870005vgvsoilw4yw3","_id":"ckn7kyf8p000nvgvswq2dvxtr"},{"post_id":"ckn7kyf8e0008vgvsogkl2sms","tag_id":"ckn7kyf8n000jvgvshdkxkgb4","_id":"ckn7kyf8p000ovgvscmyral3q"},{"post_id":"ckn7kyf8g0009vgvsi88g1n90","tag_id":"ckn7kyf8o000mvgvsz8mwyde8","_id":"ckn7kyf8q000rvgvsh1lhk7k1"},{"post_id":"ckn7kyf8g0009vgvsi88g1n90","tag_id":"ckn7kyf8p000pvgvst8ltaa2g","_id":"ckn7kyf8q000svgvspe27b27s"},{"post_id":"ckn7kyf8g0009vgvsi88g1n90","tag_id":"ckn7kyf8q000qvgvsd4rgkq7l","_id":"ckn7kyf8r000tvgvskcl0p1tm"}],"Tag":[{"name":"git","_id":"ckn7kyf870005vgvsoilw4yw3"},{"name":"git进阶","_id":"ckn7kyf8i000avgvspz1geyk8"},{"name":"git cherry-pick","_id":"ckn7kyf8k000bvgvs9okkhzh5"},{"name":"nginx","_id":"ckn7kyf8k000cvgvsthrtoo14"},{"name":"微信登录","_id":"ckn7kyf8l000fvgvsqg027nyx"},{"name":"本地调试","_id":"ckn7kyf8n000ivgvsk9ontw0y"},{"name":"windows","_id":"ckn7kyf8n000jvgvshdkxkgb4"},{"name":"设计模式","_id":"ckn7kyf8o000mvgvsz8mwyde8"},{"name":"状态模式","_id":"ckn7kyf8p000pvgvst8ltaa2g"},{"name":"生产实践","_id":"ckn7kyf8q000qvgvsd4rgkq7l"}]}}